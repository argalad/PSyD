   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"lcd.c"
  21              	.Ltext0:
  22              		.file 1 "../src/lcd.c"
 1703              		.align	2
 1704              	lcd_buffer:
 1705 0000 00000000 		.space	38400
 1705      00000000 
 1705      00000000 
 1705      00000000 
 1705      00000000 
 1706              	state:
 1707 9600 00       		.space	1
 1708 9601 000000   		.text
 1709              		.align	2
 1710              		.global	lcd_init
 1712              	lcd_init:
 1713              	.LFB0:
   1:../src/lcd.c  **** #include <s3c44b0x.h>
   2:../src/lcd.c  **** #include <lcd.h>
   3:../src/lcd.c  **** 
   4:../src/lcd.c  **** extern uint8 font[];
   5:../src/lcd.c  **** static uint8 lcd_buffer[LCD_BUFFER_SIZE];
   6:../src/lcd.c  **** 
   7:../src/lcd.c  **** static uint8 state;
   8:../src/lcd.c  **** 
   9:../src/lcd.c  **** void lcd_init( void )
  10:../src/lcd.c  **** {      
 1714              		.loc 1 10 0
 1715              		.cfi_startproc
 1716              		@ Function supports interworking.
 1717              		@ args = 0, pretend = 0, frame = 0
 1718              		@ frame_needed = 1, uses_anonymous_args = 0
 1719 0000 0DC0A0E1 		mov	ip, sp
 1720              	.LCFI0:
 1721              		.cfi_def_cfa_register 12
 1722 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1723 0008 04B04CE2 		sub	fp, ip, #4
 1724              		.cfi_offset 14, -8
 1725              		.cfi_offset 13, -12
 1726              		.cfi_offset 11, -16
 1727              	.LCFI1:
 1728              		.cfi_def_cfa 11, 4
  11:../src/lcd.c  ****     DITHMODE = 0x12210;
 1729              		.loc 1 11 0
 1730 000c FC309FE5 		ldr	r3, .L2
 1731 0010 FC209FE5 		ldr	r2, .L2+4
 1732 0014 002083E5 		str	r2, [r3, #0]
  12:../src/lcd.c  ****     DP1_2    = 0xA5A5;      
 1733              		.loc 1 12 0
 1734 0018 F8309FE5 		ldr	r3, .L2+8
 1735 001c F8209FE5 		ldr	r2, .L2+12
 1736 0020 002083E5 		str	r2, [r3, #0]
  13:../src/lcd.c  ****     DP4_7    = 0xBA5DA65;
 1737              		.loc 1 13 0
 1738 0024 F4309FE5 		ldr	r3, .L2+16
 1739 0028 F4209FE5 		ldr	r2, .L2+20
 1740 002c 002083E5 		str	r2, [r3, #0]
  14:../src/lcd.c  ****     DP3_5    = 0xA5A5F;
 1741              		.loc 1 14 0
 1742 0030 F0309FE5 		ldr	r3, .L2+24
 1743 0034 F0209FE5 		ldr	r2, .L2+28
 1744 0038 002083E5 		str	r2, [r3, #0]
  15:../src/lcd.c  ****     DP2_3    = 0xD6B;
 1745              		.loc 1 15 0
 1746 003c EC309FE5 		ldr	r3, .L2+32
 1747 0040 EC209FE5 		ldr	r2, .L2+36
 1748 0044 002083E5 		str	r2, [r3, #0]
  16:../src/lcd.c  ****     DP5_7    = 0xEB7B5ED;
 1749              		.loc 1 16 0
 1750 0048 E8309FE5 		ldr	r3, .L2+40
 1751 004c E8209FE5 		ldr	r2, .L2+44
 1752 0050 002083E5 		str	r2, [r3, #0]
  17:../src/lcd.c  ****     DP3_4    =  0x7DBE;
 1753              		.loc 1 17 0
 1754 0054 E4309FE5 		ldr	r3, .L2+48
 1755 0058 E4209FE5 		ldr	r2, .L2+52
 1756 005c 002083E5 		str	r2, [r3, #0]
  18:../src/lcd.c  ****     DP4_5    = 0x7EBDF;
 1757              		.loc 1 18 0
 1758 0060 E0309FE5 		ldr	r3, .L2+56
 1759 0064 E0209FE5 		ldr	r2, .L2+60
 1760 0068 002083E5 		str	r2, [r3, #0]
  19:../src/lcd.c  ****     DP6_7    = 0x7FDFBFE;
 1761              		.loc 1 19 0
 1762 006c DC309FE5 		ldr	r3, .L2+64
 1763 0070 DC209FE5 		ldr	r2, .L2+68
 1764 0074 002083E5 		str	r2, [r3, #0]
  20:../src/lcd.c  ****     
  21:../src/lcd.c  ****     REDLUT   = 0x0;
 1765              		.loc 1 21 0
 1766 0078 D8309FE5 		ldr	r3, .L2+72
 1767 007c 0020A0E3 		mov	r2, #0
 1768 0080 002083E5 		str	r2, [r3, #0]
  22:../src/lcd.c  ****     GREENLUT = 0x0; 
 1769              		.loc 1 22 0
 1770 0084 D0309FE5 		ldr	r3, .L2+76
 1771 0088 0020A0E3 		mov	r2, #0
 1772 008c 002083E5 		str	r2, [r3, #0]
  23:../src/lcd.c  ****     BLUELUT  = 0x0;
 1773              		.loc 1 23 0
 1774 0090 C8309FE5 		ldr	r3, .L2+80
 1775 0094 0020A0E3 		mov	r2, #0
 1776 0098 002083E5 		str	r2, [r3, #0]
  24:../src/lcd.c  **** 
  25:../src/lcd.c  ****     LCDCON1  = 0x1C020;
 1777              		.loc 1 25 0
 1778 009c 1F36A0E3 		mov	r3, #32505856
 1779 00a0 BC209FE5 		ldr	r2, .L2+84
 1780 00a4 002083E5 		str	r2, [r3, #0]
  26:../src/lcd.c  ****     LCDCON2  = 0x13CEF;
 1781              		.loc 1 26 0
 1782 00a8 B8309FE5 		ldr	r3, .L2+88
 1783 00ac B8209FE5 		ldr	r2, .L2+92
 1784 00b0 002083E5 		str	r2, [r3, #0]
  27:../src/lcd.c  ****     LCDCON3  = 0x0;    
 1785              		.loc 1 27 0
 1786 00b4 B4309FE5 		ldr	r3, .L2+96
 1787 00b8 0020A0E3 		mov	r2, #0
 1788 00bc 002083E5 		str	r2, [r3, #0]
  28:../src/lcd.c  **** 
  29:../src/lcd.c  ****     LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 1789              		.loc 1 29 0
 1790 00c0 AC309FE5 		ldr	r3, .L2+100
 1791 00c4 AC209FE5 		ldr	r2, .L2+104
 1792 00c8 A220A0E1 		mov	r2, r2, lsr #1
 1793 00cc 012282E3 		orr	r2, r2, #268435456
 1794 00d0 002083E5 		str	r2, [r3, #0]
  30:../src/lcd.c  ****     LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 1795              		.loc 1 30 0
 1796 00d4 A0209FE5 		ldr	r2, .L2+108
 1797 00d8 98309FE5 		ldr	r3, .L2+104
 1798 00dc 963C83E2 		add	r3, r3, #38400
 1799 00e0 FF34C3E3 		bic	r3, r3, #-16777216
 1800 00e4 0335C3E3 		bic	r3, r3, #12582912
 1801 00e8 A330A0E1 		mov	r3, r3, lsr #1
 1802 00ec 023283E3 		orr	r3, r3, #536870912
 1803 00f0 003082E5 		str	r3, [r2, #0]
  31:../src/lcd.c  ****     LCDSADDR3 = 0x50;
 1804              		.loc 1 31 0
 1805 00f4 84309FE5 		ldr	r3, .L2+112
 1806 00f8 5020A0E3 		mov	r2, #80
 1807 00fc 002083E5 		str	r2, [r3, #0]
  32:../src/lcd.c  ****     
  33:../src/lcd.c  ****     lcd_off();
 1808              		.loc 1 33 0
 1809 0100 FEFFFFEB 		bl	lcd_off
  34:../src/lcd.c  **** }
 1810              		.loc 1 34 0
 1811 0104 0CD04BE2 		sub	sp, fp, #12
 1812 0108 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1813 010c 1EFF2FE1 		bx	lr
 1814              	.L3:
 1815              		.align	2
 1816              	.L2:
 1817 0110 4400F001 		.word	32505924
 1818 0114 10220100 		.word	74256
 1819 0118 2000F001 		.word	32505888
 1820 011c A5A50000 		.word	42405
 1821 0120 2400F001 		.word	32505892
 1822 0124 65DAA50B 		.word	195418725
 1823 0128 2800F001 		.word	32505896
 1824 012c 5F5A0A00 		.word	678495
 1825 0130 2C00F001 		.word	32505900
 1826 0134 6B0D0000 		.word	3435
 1827 0138 3000F001 		.word	32505904
 1828 013c EDB5B70E 		.word	246920685
 1829 0140 3400F001 		.word	32505908
 1830 0144 BE7D0000 		.word	32190
 1831 0148 3800F001 		.word	32505912
 1832 014c DFEB0700 		.word	519135
 1833 0150 3C00F001 		.word	32505916
 1834 0154 FEFBFD07 		.word	134085630
 1835 0158 1400F001 		.word	32505876
 1836 015c 1800F001 		.word	32505880
 1837 0160 1C00F001 		.word	32505884
 1838 0164 20C00100 		.word	114720
 1839 0168 0400F001 		.word	32505860
 1840 016c EF3C0100 		.word	81135
 1841 0170 4000F001 		.word	32505920
 1842 0174 0800F001 		.word	32505864
 1843 0178 00000000 		.word	lcd_buffer
 1844 017c 0C00F001 		.word	32505868
 1845 0180 1000F001 		.word	32505872
 1846              		.cfi_endproc
 1847              	.LFE0:
 1849              		.align	2
 1850              		.global	lcd_on
 1852              	lcd_on:
 1853              	.LFB1:
  35:../src/lcd.c  **** 
  36:../src/lcd.c  **** void lcd_on( void )
  37:../src/lcd.c  **** {
 1854              		.loc 1 37 0
 1855              		.cfi_startproc
 1856              		@ Function supports interworking.
 1857              		@ args = 0, pretend = 0, frame = 0
 1858              		@ frame_needed = 1, uses_anonymous_args = 0
 1859 0184 0DC0A0E1 		mov	ip, sp
 1860              	.LCFI2:
 1861              		.cfi_def_cfa_register 12
 1862 0188 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1863 018c 04B04CE2 		sub	fp, ip, #4
 1864              		.cfi_offset 14, -8
 1865              		.cfi_offset 13, -12
 1866              		.cfi_offset 11, -16
 1867              	.LCFI3:
 1868              		.cfi_def_cfa 11, 4
  38:../src/lcd.c  **** 	LCDCON1 |= (1 << 0);
 1869              		.loc 1 38 0
 1870 0190 1F36A0E3 		mov	r3, #32505856
 1871 0194 1F26A0E3 		mov	r2, #32505856
 1872 0198 002092E5 		ldr	r2, [r2, #0]
 1873 019c 012082E3 		orr	r2, r2, #1
 1874 01a0 002083E5 		str	r2, [r3, #0]
  39:../src/lcd.c  ****     state = ON;
 1875              		.loc 1 39 0
 1876 01a4 10309FE5 		ldr	r3, .L5
 1877 01a8 0120A0E3 		mov	r2, #1
 1878 01ac 0020C3E5 		strb	r2, [r3, #0]
  40:../src/lcd.c  **** }
 1879              		.loc 1 40 0
 1880 01b0 0CD04BE2 		sub	sp, fp, #12
 1881 01b4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1882 01b8 1EFF2FE1 		bx	lr
 1883              	.L6:
 1884              		.align	2
 1885              	.L5:
 1886 01bc 00960000 		.word	state
 1887              		.cfi_endproc
 1888              	.LFE1:
 1890              		.align	2
 1891              		.global	lcd_off
 1893              	lcd_off:
 1894              	.LFB2:
  41:../src/lcd.c  **** 
  42:../src/lcd.c  **** void lcd_off( void )
  43:../src/lcd.c  **** {
 1895              		.loc 1 43 0
 1896              		.cfi_startproc
 1897              		@ Function supports interworking.
 1898              		@ args = 0, pretend = 0, frame = 0
 1899              		@ frame_needed = 1, uses_anonymous_args = 0
 1900 01c0 0DC0A0E1 		mov	ip, sp
 1901              	.LCFI4:
 1902              		.cfi_def_cfa_register 12
 1903 01c4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1904 01c8 04B04CE2 		sub	fp, ip, #4
 1905              		.cfi_offset 14, -8
 1906              		.cfi_offset 13, -12
 1907              		.cfi_offset 11, -16
 1908              	.LCFI5:
 1909              		.cfi_def_cfa 11, 4
  44:../src/lcd.c  **** 	LCDCON1 &= ~(1 << 0);
 1910              		.loc 1 44 0
 1911 01cc 1F36A0E3 		mov	r3, #32505856
 1912 01d0 1F26A0E3 		mov	r2, #32505856
 1913 01d4 002092E5 		ldr	r2, [r2, #0]
 1914 01d8 0120C2E3 		bic	r2, r2, #1
 1915 01dc 002083E5 		str	r2, [r3, #0]
  45:../src/lcd.c  ****     state = OFF;
 1916              		.loc 1 45 0
 1917 01e0 10309FE5 		ldr	r3, .L8
 1918 01e4 0020A0E3 		mov	r2, #0
 1919 01e8 0020C3E5 		strb	r2, [r3, #0]
  46:../src/lcd.c  **** }
 1920              		.loc 1 46 0
 1921 01ec 0CD04BE2 		sub	sp, fp, #12
 1922 01f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1923 01f4 1EFF2FE1 		bx	lr
 1924              	.L9:
 1925              		.align	2
 1926              	.L8:
 1927 01f8 00960000 		.word	state
 1928              		.cfi_endproc
 1929              	.LFE2:
 1931              		.align	2
 1932              		.global	lcd_status
 1934              	lcd_status:
 1935              	.LFB3:
  47:../src/lcd.c  **** 
  48:../src/lcd.c  **** uint8 lcd_status( void )
  49:../src/lcd.c  **** {
 1936              		.loc 1 49 0
 1937              		.cfi_startproc
 1938              		@ Function supports interworking.
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 1, uses_anonymous_args = 0
 1941 01fc 0DC0A0E1 		mov	ip, sp
 1942              	.LCFI6:
 1943              		.cfi_def_cfa_register 12
 1944 0200 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1945 0204 04B04CE2 		sub	fp, ip, #4
 1946              		.cfi_offset 14, -8
 1947              		.cfi_offset 13, -12
 1948              		.cfi_offset 11, -16
 1949              	.LCFI7:
 1950              		.cfi_def_cfa 11, 4
  50:../src/lcd.c  ****     return state;
 1951              		.loc 1 50 0
 1952 0208 10309FE5 		ldr	r3, .L11
 1953 020c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  51:../src/lcd.c  **** }
 1954              		.loc 1 51 0
 1955 0210 0300A0E1 		mov	r0, r3
 1956 0214 0CD04BE2 		sub	sp, fp, #12
 1957 0218 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1958 021c 1EFF2FE1 		bx	lr
 1959              	.L12:
 1960              		.align	2
 1961              	.L11:
 1962 0220 00960000 		.word	state
 1963              		.cfi_endproc
 1964              	.LFE3:
 1966              		.align	2
 1967              		.global	lcd_clear
 1969              	lcd_clear:
 1970              	.LFB4:
  52:../src/lcd.c  **** 
  53:../src/lcd.c  **** void lcd_clear( void )
  54:../src/lcd.c  **** {
 1971              		.loc 1 54 0
 1972              		.cfi_startproc
 1973              		@ Function supports interworking.
 1974              		@ args = 0, pretend = 0, frame = 8
 1975              		@ frame_needed = 1, uses_anonymous_args = 0
 1976 0224 0DC0A0E1 		mov	ip, sp
 1977              	.LCFI8:
 1978              		.cfi_def_cfa_register 12
 1979 0228 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1980 022c 04B04CE2 		sub	fp, ip, #4
 1981              		.cfi_offset 14, -8
 1982              		.cfi_offset 13, -12
 1983              		.cfi_offset 11, -16
 1984              	.LCFI9:
 1985              		.cfi_def_cfa 11, 4
 1986 0230 08D04DE2 		sub	sp, sp, #8
  55:../src/lcd.c  ****     uint16 x, y;
  56:../src/lcd.c  **** 
  57:../src/lcd.c  ****     for(x = 0; x < LCD_WIDTH; x++)
 1987              		.loc 1 57 0
 1988 0234 0030A0E3 		mov	r3, #0
 1989 0238 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 1990 023c 110000EA 		b	.L14
 1991              	.L17:
  58:../src/lcd.c  ****     	for(y = 0; y < LCD_HEIGHT; y++)
 1992              		.loc 1 58 0
 1993 0240 0030A0E3 		mov	r3, #0
 1994 0244 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 1995 0248 080000EA 		b	.L15
 1996              	.L16:
  59:../src/lcd.c  ****     		lcd_putpixel(x, y, WHITE);
 1997              		.loc 1 59 0 discriminator 2
 1998 024c BE205BE1 		ldrh	r2, [fp, #-14]
 1999 0250 B0315BE1 		ldrh	r3, [fp, #-16]
 2000 0254 0200A0E1 		mov	r0, r2
 2001 0258 0310A0E1 		mov	r1, r3
 2002 025c 0020A0E3 		mov	r2, #0
 2003 0260 FEFFFFEB 		bl	lcd_putpixel
  58:../src/lcd.c  ****     	for(y = 0; y < LCD_HEIGHT; y++)
 2004              		.loc 1 58 0 discriminator 2
 2005 0264 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2006 0268 013083E2 		add	r3, r3, #1
 2007 026c B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2008              	.L15:
  58:../src/lcd.c  ****     	for(y = 0; y < LCD_HEIGHT; y++)
 2009              		.loc 1 58 0 is_stmt 0 discriminator 1
 2010 0270 B0315BE1 		ldrh	r3, [fp, #-16]
 2011 0274 EF0053E3 		cmp	r3, #239
 2012 0278 F3FFFF9A 		bls	.L16
  57:../src/lcd.c  ****     for(x = 0; x < LCD_WIDTH; x++)
 2013              		.loc 1 57 0 is_stmt 1
 2014 027c BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2015 0280 013083E2 		add	r3, r3, #1
 2016 0284 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2017              	.L14:
  57:../src/lcd.c  ****     for(x = 0; x < LCD_WIDTH; x++)
 2018              		.loc 1 57 0 is_stmt 0 discriminator 1
 2019 0288 BE205BE1 		ldrh	r2, [fp, #-14]
 2020 028c 10309FE5 		ldr	r3, .L18
 2021 0290 030052E1 		cmp	r2, r3
 2022 0294 E9FFFF9A 		bls	.L17
  60:../src/lcd.c  **** 
  61:../src/lcd.c  **** }
 2023              		.loc 1 61 0 is_stmt 1
 2024 0298 0CD04BE2 		sub	sp, fp, #12
 2025 029c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2026 02a0 1EFF2FE1 		bx	lr
 2027              	.L19:
 2028              		.align	2
 2029              	.L18:
 2030 02a4 3F010000 		.word	319
 2031              		.cfi_endproc
 2032              	.LFE4:
 2034              		.align	2
 2035              		.global	lcd_putpixel
 2037              	lcd_putpixel:
 2038              	.LFB5:
  62:../src/lcd.c  **** 
  63:../src/lcd.c  **** void lcd_putpixel( uint16 x, uint16 y, uint8 c)
  64:../src/lcd.c  **** {
 2039              		.loc 1 64 0
 2040              		.cfi_startproc
 2041              		@ Function supports interworking.
 2042              		@ args = 0, pretend = 0, frame = 16
 2043              		@ frame_needed = 1, uses_anonymous_args = 0
 2044 02a8 0DC0A0E1 		mov	ip, sp
 2045              	.LCFI10:
 2046              		.cfi_def_cfa_register 12
 2047 02ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2048 02b0 04B04CE2 		sub	fp, ip, #4
 2049              		.cfi_offset 14, -8
 2050              		.cfi_offset 13, -12
 2051              		.cfi_offset 11, -16
 2052              	.LCFI11:
 2053              		.cfi_def_cfa 11, 4
 2054 02b4 10D04DE2 		sub	sp, sp, #16
 2055 02b8 0230A0E1 		mov	r3, r2
 2056 02bc B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2057 02c0 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2058 02c4 19304BE5 		strb	r3, [fp, #-25]
  65:../src/lcd.c  ****     uint8 byte, bit;
  66:../src/lcd.c  ****     uint16 i;
  67:../src/lcd.c  **** 
  68:../src/lcd.c  ****     i = x/2 + y*(LCD_WIDTH/2);
 2059              		.loc 1 68 0
 2060 02c8 B6315BE1 		ldrh	r3, [fp, #-22]
 2061 02cc A330A0E1 		mov	r3, r3, lsr #1
 2062 02d0 0338A0E1 		mov	r3, r3, asl #16
 2063 02d4 2328A0E1 		mov	r2, r3, lsr #16
 2064 02d8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2065 02dc 0310A0E1 		mov	r1, r3	@ movhi
 2066 02e0 0111A0E1 		mov	r1, r1, asl #2
 2067 02e4 033081E0 		add	r3, r1, r3
 2068 02e8 8332A0E1 		mov	r3, r3, asl #5
 2069 02ec 0338A0E1 		mov	r3, r3, asl #16
 2070 02f0 2338A0E1 		mov	r3, r3, lsr #16
 2071 02f4 033082E0 		add	r3, r2, r3
 2072 02f8 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  69:../src/lcd.c  ****     bit = (1-x%2)*4;
 2073              		.loc 1 69 0
 2074 02fc B6315BE1 		ldrh	r3, [fp, #-22]
 2075 0300 013003E2 		and	r3, r3, #1
 2076 0304 000053E3 		cmp	r3, #0
 2077 0308 0100001A 		bne	.L21
 2078              		.loc 1 69 0 is_stmt 0 discriminator 1
 2079 030c 0430A0E3 		mov	r3, #4
 2080 0310 000000EA 		b	.L22
 2081              	.L21:
 2082              		.loc 1 69 0 discriminator 2
 2083 0314 0030A0E3 		mov	r3, #0
 2084              	.L22:
 2085              		.loc 1 69 0 discriminator 3
 2086 0318 0F304BE5 		strb	r3, [fp, #-15]
  70:../src/lcd.c  ****     
  71:../src/lcd.c  ****     byte = lcd_buffer[i];
 2087              		.loc 1 71 0 is_stmt 1 discriminator 3
 2088 031c BE305BE1 		ldrh	r3, [fp, #-14]
 2089 0320 68209FE5 		ldr	r2, .L23
 2090 0324 0330D2E7 		ldrb	r3, [r2, r3]
 2091 0328 10304BE5 		strb	r3, [fp, #-16]
  72:../src/lcd.c  ****     byte &= ~(0xF << bit);
 2092              		.loc 1 72 0 discriminator 3
 2093 032c 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2094 0330 0F20A0E3 		mov	r2, #15
 2095 0334 1233A0E1 		mov	r3, r2, asl r3
 2096 0338 FF3003E2 		and	r3, r3, #255
 2097 033c 0330E0E1 		mvn	r3, r3
 2098 0340 FF2003E2 		and	r2, r3, #255
 2099 0344 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2100 0348 033002E0 		and	r3, r2, r3
 2101 034c FF3003E2 		and	r3, r3, #255
 2102 0350 10304BE5 		strb	r3, [fp, #-16]
  73:../src/lcd.c  ****     byte |= c << bit;
 2103              		.loc 1 73 0 discriminator 3
 2104 0354 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2105 0358 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2106 035c 1233A0E1 		mov	r3, r2, asl r3
 2107 0360 FF2003E2 		and	r2, r3, #255
 2108 0364 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2109 0368 033082E1 		orr	r3, r2, r3
 2110 036c FF3003E2 		and	r3, r3, #255
 2111 0370 10304BE5 		strb	r3, [fp, #-16]
  74:../src/lcd.c  ****     lcd_buffer[i] = byte;
 2112              		.loc 1 74 0 discriminator 3
 2113 0374 BE305BE1 		ldrh	r3, [fp, #-14]
 2114 0378 10209FE5 		ldr	r2, .L23
 2115 037c 10105BE5 		ldrb	r1, [fp, #-16]
 2116 0380 0310C2E7 		strb	r1, [r2, r3]
  75:../src/lcd.c  **** }
 2117              		.loc 1 75 0 discriminator 3
 2118 0384 0CD04BE2 		sub	sp, fp, #12
 2119 0388 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2120 038c 1EFF2FE1 		bx	lr
 2121              	.L24:
 2122              		.align	2
 2123              	.L23:
 2124 0390 00000000 		.word	lcd_buffer
 2125              		.cfi_endproc
 2126              	.LFE5:
 2128              		.align	2
 2129              		.global	lcd_getpixel
 2131              	lcd_getpixel:
 2132              	.LFB6:
  76:../src/lcd.c  **** 
  77:../src/lcd.c  **** uint8 lcd_getpixel( uint16 x, uint16 y )
  78:../src/lcd.c  **** {
 2133              		.loc 1 78 0
 2134              		.cfi_startproc
 2135              		@ Function supports interworking.
 2136              		@ args = 0, pretend = 0, frame = 16
 2137              		@ frame_needed = 1, uses_anonymous_args = 0
 2138 0394 0DC0A0E1 		mov	ip, sp
 2139              	.LCFI12:
 2140              		.cfi_def_cfa_register 12
 2141 0398 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2142 039c 04B04CE2 		sub	fp, ip, #4
 2143              		.cfi_offset 14, -8
 2144              		.cfi_offset 13, -12
 2145              		.cfi_offset 11, -16
 2146              	.LCFI13:
 2147              		.cfi_def_cfa 11, 4
 2148 03a0 10D04DE2 		sub	sp, sp, #16
 2149 03a4 0020A0E1 		mov	r2, r0
 2150 03a8 0130A0E1 		mov	r3, r1
 2151 03ac B6214BE1 		strh	r2, [fp, #-22]	@ movhi
 2152 03b0 B8314BE1 		strh	r3, [fp, #-24]	@ movhi
  79:../src/lcd.c  **** 	uint8 color;
  80:../src/lcd.c  **** 	uint32 word;
  81:../src/lcd.c  **** 
  82:../src/lcd.c  **** 	word = lcd_buffer[x/8 + y*(320/8)];
 2153              		.loc 1 82 0
 2154 03b4 B6315BE1 		ldrh	r3, [fp, #-22]
 2155 03b8 A331A0E1 		mov	r3, r3, lsr #3
 2156 03bc 0338A0E1 		mov	r3, r3, asl #16
 2157 03c0 2338A0E1 		mov	r3, r3, lsr #16
 2158 03c4 0310A0E1 		mov	r1, r3
 2159 03c8 B8215BE1 		ldrh	r2, [fp, #-24]
 2160 03cc 0230A0E1 		mov	r3, r2
 2161 03d0 0331A0E1 		mov	r3, r3, asl #2
 2162 03d4 023083E0 		add	r3, r3, r2
 2163 03d8 8331A0E1 		mov	r3, r3, asl #3
 2164 03dc 033081E0 		add	r3, r1, r3
 2165 03e0 54209FE5 		ldr	r2, .L26
 2166 03e4 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2167 03e8 10300BE5 		str	r3, [fp, #-16]
  83:../src/lcd.c  **** 	word &= (0xf0000000 >> (x%8)*4);
 2168              		.loc 1 83 0
 2169 03ec B6315BE1 		ldrh	r3, [fp, #-22]
 2170 03f0 073003E2 		and	r3, r3, #7
 2171 03f4 0331A0E1 		mov	r3, r3, asl #2
 2172 03f8 0F22A0E3 		mov	r2, #-268435456
 2173 03fc 3233A0E1 		mov	r3, r2, lsr r3
 2174 0400 10201BE5 		ldr	r2, [fp, #-16]
 2175 0404 033002E0 		and	r3, r2, r3
 2176 0408 10300BE5 		str	r3, [fp, #-16]
  84:../src/lcd.c  **** 	color = (uint32) word >> (7 - x%8)*4;
 2177              		.loc 1 84 0
 2178 040c B6315BE1 		ldrh	r3, [fp, #-22]
 2179 0410 0330E0E1 		mvn	r3, r3
 2180 0414 073003E2 		and	r3, r3, #7
 2181 0418 0331A0E1 		mov	r3, r3, asl #2
 2182 041c 10201BE5 		ldr	r2, [fp, #-16]
 2183 0420 3233A0E1 		mov	r3, r2, lsr r3
 2184 0424 11304BE5 		strb	r3, [fp, #-17]
  85:../src/lcd.c  **** 
  86:../src/lcd.c  **** 	return color;
 2185              		.loc 1 86 0
 2186 0428 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
  87:../src/lcd.c  **** }
 2187              		.loc 1 87 0
 2188 042c 0300A0E1 		mov	r0, r3
 2189 0430 0CD04BE2 		sub	sp, fp, #12
 2190 0434 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2191 0438 1EFF2FE1 		bx	lr
 2192              	.L27:
 2193              		.align	2
 2194              	.L26:
 2195 043c 00000000 		.word	lcd_buffer
 2196              		.cfi_endproc
 2197              	.LFE6:
 2199              		.align	2
 2200              		.global	lcd_draw_hline
 2202              	lcd_draw_hline:
 2203              	.LFB7:
  88:../src/lcd.c  **** 
  89:../src/lcd.c  **** void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
  90:../src/lcd.c  **** {
 2204              		.loc 1 90 0
 2205              		.cfi_startproc
 2206              		@ Function supports interworking.
 2207              		@ args = 4, pretend = 0, frame = 16
 2208              		@ frame_needed = 1, uses_anonymous_args = 0
 2209 0440 0DC0A0E1 		mov	ip, sp
 2210              	.LCFI14:
 2211              		.cfi_def_cfa_register 12
 2212 0444 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2213 0448 04B04CE2 		sub	fp, ip, #4
 2214              		.cfi_offset 14, -8
 2215              		.cfi_offset 13, -12
 2216              		.cfi_offset 11, -16
 2217              	.LCFI15:
 2218              		.cfi_def_cfa 11, 4
 2219 044c 10D04DE2 		sub	sp, sp, #16
 2220 0450 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2221 0454 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2222 0458 BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2223 045c 1B304BE5 		strb	r3, [fp, #-27]
  91:../src/lcd.c  **** 	uint16 length;
  92:../src/lcd.c  **** 
  93:../src/lcd.c  ****     while(width--)
 2224              		.loc 1 93 0
 2225 0460 1F0000EA 		b	.L29
 2226              	.L32:
  94:../src/lcd.c  ****     {
  95:../src/lcd.c  ****     	length = xright - xleft + 5;
 2227              		.loc 1 95 0
 2228 0464 B8215BE1 		ldrh	r2, [fp, #-24]	@ movhi
 2229 0468 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2230 046c 023063E0 		rsb	r3, r3, r2
 2231 0470 0338A0E1 		mov	r3, r3, asl #16
 2232 0474 2338A0E1 		mov	r3, r3, lsr #16
 2233 0478 053083E2 		add	r3, r3, #5
 2234 047c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  96:../src/lcd.c  ****     	while(length--)
 2235              		.loc 1 96 0
 2236 0480 0A0000EA 		b	.L30
 2237              	.L31:
  97:../src/lcd.c  ****     	{
  98:../src/lcd.c  ****     		lcd_putpixel(xleft + length, y, color);
 2238              		.loc 1 98 0
 2239 0484 B6215BE1 		ldrh	r2, [fp, #-22]	@ movhi
 2240 0488 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2241 048c 033082E0 		add	r3, r2, r3
 2242 0490 0338A0E1 		mov	r3, r3, asl #16
 2243 0494 2318A0E1 		mov	r1, r3, lsr #16
 2244 0498 BA215BE1 		ldrh	r2, [fp, #-26]
 2245 049c 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2246 04a0 0100A0E1 		mov	r0, r1
 2247 04a4 0210A0E1 		mov	r1, r2
 2248 04a8 0320A0E1 		mov	r2, r3
 2249 04ac FEFFFFEB 		bl	lcd_putpixel
 2250              	.L30:
  96:../src/lcd.c  ****     	while(length--)
 2251              		.loc 1 96 0 discriminator 1
 2252 04b0 BE305BE1 		ldrh	r3, [fp, #-14]
 2253 04b4 000053E3 		cmp	r3, #0
 2254 04b8 0030A003 		moveq	r3, #0
 2255 04bc 0130A013 		movne	r3, #1
 2256 04c0 FF3003E2 		and	r3, r3, #255
 2257 04c4 BE205BE1 		ldrh	r2, [fp, #-14]	@ movhi
 2258 04c8 012042E2 		sub	r2, r2, #1
 2259 04cc BE204BE1 		strh	r2, [fp, #-14]	@ movhi
 2260 04d0 000053E3 		cmp	r3, #0
 2261 04d4 EAFFFF1A 		bne	.L31
  99:../src/lcd.c  ****     	}
 100:../src/lcd.c  ****     	y++;
 2262              		.loc 1 100 0
 2263 04d8 BA315BE1 		ldrh	r3, [fp, #-26]	@ movhi
 2264 04dc 013083E2 		add	r3, r3, #1
 2265 04e0 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 2266              	.L29:
  93:../src/lcd.c  ****     while(width--)
 2267              		.loc 1 93 0 discriminator 1
 2268 04e4 B430DBE1 		ldrh	r3, [fp, #4]
 2269 04e8 000053E3 		cmp	r3, #0
 2270 04ec 0030A003 		moveq	r3, #0
 2271 04f0 0130A013 		movne	r3, #1
 2272 04f4 FF3003E2 		and	r3, r3, #255
 2273 04f8 B420DBE1 		ldrh	r2, [fp, #4]	@ movhi
 2274 04fc 012042E2 		sub	r2, r2, #1
 2275 0500 B420CBE1 		strh	r2, [fp, #4]	@ movhi
 2276 0504 000053E3 		cmp	r3, #0
 2277 0508 D5FFFF1A 		bne	.L32
 101:../src/lcd.c  ****     }
 102:../src/lcd.c  **** }
 2278              		.loc 1 102 0
 2279 050c 0CD04BE2 		sub	sp, fp, #12
 2280 0510 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2281 0514 1EFF2FE1 		bx	lr
 2282              		.cfi_endproc
 2283              	.LFE7:
 2285              		.align	2
 2286              		.global	lcd_draw_vline
 2288              	lcd_draw_vline:
 2289              	.LFB8:
 103:../src/lcd.c  **** 
 104:../src/lcd.c  **** void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
 105:../src/lcd.c  **** {
 2290              		.loc 1 105 0
 2291              		.cfi_startproc
 2292              		@ Function supports interworking.
 2293              		@ args = 4, pretend = 0, frame = 16
 2294              		@ frame_needed = 1, uses_anonymous_args = 0
 2295 0518 0DC0A0E1 		mov	ip, sp
 2296              	.LCFI16:
 2297              		.cfi_def_cfa_register 12
 2298 051c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2299 0520 04B04CE2 		sub	fp, ip, #4
 2300              		.cfi_offset 14, -8
 2301              		.cfi_offset 13, -12
 2302              		.cfi_offset 11, -16
 2303              	.LCFI17:
 2304              		.cfi_def_cfa 11, 4
 2305 0524 10D04DE2 		sub	sp, sp, #16
 2306 0528 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2307 052c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2308 0530 BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2309 0534 1B304BE5 		strb	r3, [fp, #-27]
 106:../src/lcd.c  ****     uint16 length;
 107:../src/lcd.c  **** 
 108:../src/lcd.c  ****     while(width--)
 2310              		.loc 1 108 0
 2311 0538 1F0000EA 		b	.L34
 2312              	.L37:
 109:../src/lcd.c  ****     {
 110:../src/lcd.c  ****     	length = ydown - yup + 5;
 2313              		.loc 1 110 0
 2314 053c B8215BE1 		ldrh	r2, [fp, #-24]	@ movhi
 2315 0540 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2316 0544 023063E0 		rsb	r3, r3, r2
 2317 0548 0338A0E1 		mov	r3, r3, asl #16
 2318 054c 2338A0E1 		mov	r3, r3, lsr #16
 2319 0550 053083E2 		add	r3, r3, #5
 2320 0554 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 111:../src/lcd.c  ****     	while(length--)
 2321              		.loc 1 111 0
 2322 0558 0A0000EA 		b	.L35
 2323              	.L36:
 112:../src/lcd.c  ****     	{
 113:../src/lcd.c  ****     		lcd_putpixel(x, yup + length, color);
 2324              		.loc 1 113 0
 2325 055c B6215BE1 		ldrh	r2, [fp, #-22]	@ movhi
 2326 0560 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2327 0564 033082E0 		add	r3, r2, r3
 2328 0568 0338A0E1 		mov	r3, r3, asl #16
 2329 056c 2328A0E1 		mov	r2, r3, lsr #16
 2330 0570 BA115BE1 		ldrh	r1, [fp, #-26]
 2331 0574 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2332 0578 0100A0E1 		mov	r0, r1
 2333 057c 0210A0E1 		mov	r1, r2
 2334 0580 0320A0E1 		mov	r2, r3
 2335 0584 FEFFFFEB 		bl	lcd_putpixel
 2336              	.L35:
 111:../src/lcd.c  ****     	while(length--)
 2337              		.loc 1 111 0 discriminator 1
 2338 0588 BE305BE1 		ldrh	r3, [fp, #-14]
 2339 058c 000053E3 		cmp	r3, #0
 2340 0590 0030A003 		moveq	r3, #0
 2341 0594 0130A013 		movne	r3, #1
 2342 0598 FF3003E2 		and	r3, r3, #255
 2343 059c BE205BE1 		ldrh	r2, [fp, #-14]	@ movhi
 2344 05a0 012042E2 		sub	r2, r2, #1
 2345 05a4 BE204BE1 		strh	r2, [fp, #-14]	@ movhi
 2346 05a8 000053E3 		cmp	r3, #0
 2347 05ac EAFFFF1A 		bne	.L36
 114:../src/lcd.c  ****     	}
 115:../src/lcd.c  ****     	x++;
 2348              		.loc 1 115 0
 2349 05b0 BA315BE1 		ldrh	r3, [fp, #-26]	@ movhi
 2350 05b4 013083E2 		add	r3, r3, #1
 2351 05b8 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 2352              	.L34:
 108:../src/lcd.c  ****     while(width--)
 2353              		.loc 1 108 0 discriminator 1
 2354 05bc B430DBE1 		ldrh	r3, [fp, #4]
 2355 05c0 000053E3 		cmp	r3, #0
 2356 05c4 0030A003 		moveq	r3, #0
 2357 05c8 0130A013 		movne	r3, #1
 2358 05cc FF3003E2 		and	r3, r3, #255
 2359 05d0 B420DBE1 		ldrh	r2, [fp, #4]	@ movhi
 2360 05d4 012042E2 		sub	r2, r2, #1
 2361 05d8 B420CBE1 		strh	r2, [fp, #4]	@ movhi
 2362 05dc 000053E3 		cmp	r3, #0
 2363 05e0 D5FFFF1A 		bne	.L37
 116:../src/lcd.c  ****     }
 117:../src/lcd.c  **** }
 2364              		.loc 1 117 0
 2365 05e4 0CD04BE2 		sub	sp, fp, #12
 2366 05e8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2367 05ec 1EFF2FE1 		bx	lr
 2368              		.cfi_endproc
 2369              	.LFE8:
 2371              		.align	2
 2372              		.global	lcd_draw_box
 2374              	lcd_draw_box:
 2375              	.LFB9:
 118:../src/lcd.c  **** 
 119:../src/lcd.c  **** void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width
 120:../src/lcd.c  **** {
 2376              		.loc 1 120 0
 2377              		.cfi_startproc
 2378              		@ Function supports interworking.
 2379              		@ args = 8, pretend = 0, frame = 8
 2380              		@ frame_needed = 1, uses_anonymous_args = 0
 2381 05f0 0DC0A0E1 		mov	ip, sp
 2382              	.LCFI18:
 2383              		.cfi_def_cfa_register 12
 2384 05f4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2385 05f8 04B04CE2 		sub	fp, ip, #4
 2386              		.cfi_offset 14, -8
 2387              		.cfi_offset 13, -12
 2388              		.cfi_offset 11, -16
 2389              	.LCFI19:
 2390              		.cfi_def_cfa 11, 4
 2391 05fc 10D04DE2 		sub	sp, sp, #16
 2392 0600 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2393 0604 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2394 0608 B2214BE1 		strh	r2, [fp, #-18]	@ movhi
 2395 060c B4314BE1 		strh	r3, [fp, #-20]	@ movhi
 121:../src/lcd.c  ****     lcd_draw_hline(xleft, xright, yup, color, width);
 2396              		.loc 1 121 0
 2397 0610 BE005BE1 		ldrh	r0, [fp, #-14]
 2398 0614 B2115BE1 		ldrh	r1, [fp, #-18]
 2399 0618 B0215BE1 		ldrh	r2, [fp, #-16]
 2400 061c 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2401 0620 B8C0DBE1 		ldrh	ip, [fp, #8]
 2402 0624 00C08DE5 		str	ip, [sp, #0]
 2403 0628 FEFFFFEB 		bl	lcd_draw_hline
 122:../src/lcd.c  ****     lcd_draw_hline(xleft, xright, ydown, color, width);
 2404              		.loc 1 122 0
 2405 062c BE005BE1 		ldrh	r0, [fp, #-14]
 2406 0630 B2115BE1 		ldrh	r1, [fp, #-18]
 2407 0634 B4215BE1 		ldrh	r2, [fp, #-20]
 2408 0638 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2409 063c B8C0DBE1 		ldrh	ip, [fp, #8]
 2410 0640 00C08DE5 		str	ip, [sp, #0]
 2411 0644 FEFFFFEB 		bl	lcd_draw_hline
 123:../src/lcd.c  ****     lcd_draw_vline(yup, ydown, xleft, color, width);
 2412              		.loc 1 123 0
 2413 0648 B0015BE1 		ldrh	r0, [fp, #-16]
 2414 064c B4115BE1 		ldrh	r1, [fp, #-20]
 2415 0650 BE205BE1 		ldrh	r2, [fp, #-14]
 2416 0654 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2417 0658 B8C0DBE1 		ldrh	ip, [fp, #8]
 2418 065c 00C08DE5 		str	ip, [sp, #0]
 2419 0660 FEFFFFEB 		bl	lcd_draw_vline
 124:../src/lcd.c  ****     lcd_draw_vline(yup, ydown, xright, color, width);
 2420              		.loc 1 124 0
 2421 0664 B0015BE1 		ldrh	r0, [fp, #-16]
 2422 0668 B4115BE1 		ldrh	r1, [fp, #-20]
 2423 066c B2215BE1 		ldrh	r2, [fp, #-18]
 2424 0670 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2425 0674 B8C0DBE1 		ldrh	ip, [fp, #8]
 2426 0678 00C08DE5 		str	ip, [sp, #0]
 2427 067c FEFFFFEB 		bl	lcd_draw_vline
 125:../src/lcd.c  **** }
 2428              		.loc 1 125 0
 2429 0680 0CD04BE2 		sub	sp, fp, #12
 2430 0684 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2431 0688 1EFF2FE1 		bx	lr
 2432              		.cfi_endproc
 2433              	.LFE9:
 2435              		.align	2
 2436              		.global	lcd_putchar
 2438              	lcd_putchar:
 2439              	.LFB10:
 126:../src/lcd.c  **** 
 127:../src/lcd.c  **** void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
 128:../src/lcd.c  **** {
 2440              		.loc 1 128 0
 2441              		.cfi_startproc
 2442              		@ Function supports interworking.
 2443              		@ args = 0, pretend = 0, frame = 16
 2444              		@ frame_needed = 1, uses_anonymous_args = 0
 2445 068c 0DC0A0E1 		mov	ip, sp
 2446              	.LCFI20:
 2447              		.cfi_def_cfa_register 12
 2448 0690 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2449 0694 04B04CE2 		sub	fp, ip, #4
 2450              		.cfi_offset 14, -8
 2451              		.cfi_offset 13, -12
 2452              		.cfi_offset 11, -16
 2453              	.LCFI21:
 2454              		.cfi_def_cfa 11, 4
 2455 0698 10D04DE2 		sub	sp, sp, #16
 2456 069c B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2457 06a0 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2458 06a4 19204BE5 		strb	r2, [fp, #-25]
 2459 06a8 1A304BE5 		strb	r3, [fp, #-26]
 129:../src/lcd.c  ****     uint8 line, row;
 130:../src/lcd.c  ****     uint8 *bitmap;
 131:../src/lcd.c  **** 
 132:../src/lcd.c  ****     bitmap = font + ch*16;
 2460              		.loc 1 132 0
 2461 06ac 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2462 06b0 0332A0E1 		mov	r3, r3, asl #4
 2463 06b4 0320A0E1 		mov	r2, r3
 2464 06b8 1C319FE5 		ldr	r3, .L46
 2465 06bc 033082E0 		add	r3, r2, r3
 2466 06c0 14300BE5 		str	r3, [fp, #-20]
 133:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2467              		.loc 1 133 0
 2468 06c4 0030A0E3 		mov	r3, #0
 2469 06c8 0D304BE5 		strb	r3, [fp, #-13]
 2470 06cc 3C0000EA 		b	.L40
 2471              	.L45:
 134:../src/lcd.c  ****         for( row=0; row<8; row++ )                    
 2472              		.loc 1 134 0
 2473 06d0 0030A0E3 		mov	r3, #0
 2474 06d4 0E304BE5 		strb	r3, [fp, #-14]
 2475 06d8 330000EA 		b	.L41
 2476              	.L44:
 135:../src/lcd.c  ****             if( bitmap[line] & (0x80 >> row) )
 2477              		.loc 1 135 0
 2478 06dc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2479 06e0 14201BE5 		ldr	r2, [fp, #-20]
 2480 06e4 033082E0 		add	r3, r2, r3
 2481 06e8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2482 06ec 0320A0E1 		mov	r2, r3
 2483 06f0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2484 06f4 8010A0E3 		mov	r1, #128
 2485 06f8 5133A0E1 		mov	r3, r1, asr r3
 2486 06fc 033002E0 		and	r3, r2, r3
 2487 0700 000053E3 		cmp	r3, #0
 2488 0704 1300000A 		beq	.L42
 136:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, color );
 2489              		.loc 1 136 0
 2490 0708 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2491 070c 0338A0E1 		mov	r3, r3, asl #16
 2492 0710 2328A0E1 		mov	r2, r3, lsr #16
 2493 0714 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2494 0718 033082E0 		add	r3, r2, r3
 2495 071c 0338A0E1 		mov	r3, r3, asl #16
 2496 0720 2318A0E1 		mov	r1, r3, lsr #16
 2497 0724 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2498 0728 0338A0E1 		mov	r3, r3, asl #16
 2499 072c 2328A0E1 		mov	r2, r3, lsr #16
 2500 0730 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2501 0734 033082E0 		add	r3, r2, r3
 2502 0738 0338A0E1 		mov	r3, r3, asl #16
 2503 073c 2328A0E1 		mov	r2, r3, lsr #16
 2504 0740 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2505 0744 0100A0E1 		mov	r0, r1
 2506 0748 0210A0E1 		mov	r1, r2
 2507 074c 0320A0E1 		mov	r2, r3
 2508 0750 FEFFFFEB 		bl	lcd_putpixel
 2509 0754 110000EA 		b	.L43
 2510              	.L42:
 137:../src/lcd.c  ****             else
 138:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, WHITE );
 2511              		.loc 1 138 0
 2512 0758 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2513 075c 0338A0E1 		mov	r3, r3, asl #16
 2514 0760 2328A0E1 		mov	r2, r3, lsr #16
 2515 0764 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2516 0768 033082E0 		add	r3, r2, r3
 2517 076c 0338A0E1 		mov	r3, r3, asl #16
 2518 0770 2328A0E1 		mov	r2, r3, lsr #16
 2519 0774 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2520 0778 0338A0E1 		mov	r3, r3, asl #16
 2521 077c 2318A0E1 		mov	r1, r3, lsr #16
 2522 0780 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2523 0784 033081E0 		add	r3, r1, r3
 2524 0788 0338A0E1 		mov	r3, r3, asl #16
 2525 078c 2338A0E1 		mov	r3, r3, lsr #16
 2526 0790 0200A0E1 		mov	r0, r2
 2527 0794 0310A0E1 		mov	r1, r3
 2528 0798 0020A0E3 		mov	r2, #0
 2529 079c FEFFFFEB 		bl	lcd_putpixel
 2530              	.L43:
 134:../src/lcd.c  ****         for( row=0; row<8; row++ )                    
 2531              		.loc 1 134 0
 2532 07a0 0E305BE5 		ldrb	r3, [fp, #-14]
 2533 07a4 013083E2 		add	r3, r3, #1
 2534 07a8 0E304BE5 		strb	r3, [fp, #-14]
 2535              	.L41:
 134:../src/lcd.c  ****         for( row=0; row<8; row++ )                    
 2536              		.loc 1 134 0 is_stmt 0 discriminator 1
 2537 07ac 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2538 07b0 070053E3 		cmp	r3, #7
 2539 07b4 C8FFFF9A 		bls	.L44
 133:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2540              		.loc 1 133 0 is_stmt 1
 2541 07b8 0D305BE5 		ldrb	r3, [fp, #-13]
 2542 07bc 013083E2 		add	r3, r3, #1
 2543 07c0 0D304BE5 		strb	r3, [fp, #-13]
 2544              	.L40:
 133:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2545              		.loc 1 133 0 is_stmt 0 discriminator 1
 2546 07c4 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2547 07c8 0F0053E3 		cmp	r3, #15
 2548 07cc BFFFFF9A 		bls	.L45
 139:../src/lcd.c  **** }
 2549              		.loc 1 139 0 is_stmt 1
 2550 07d0 0CD04BE2 		sub	sp, fp, #12
 2551 07d4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2552 07d8 1EFF2FE1 		bx	lr
 2553              	.L47:
 2554              		.align	2
 2555              	.L46:
 2556 07dc 00000000 		.word	font
 2557              		.cfi_endproc
 2558              	.LFE10:
 2560              		.align	2
 2561              		.global	lcd_puts
 2563              	lcd_puts:
 2564              	.LFB11:
 140:../src/lcd.c  **** 
 141:../src/lcd.c  **** void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
 142:../src/lcd.c  **** {
 2565              		.loc 1 142 0
 2566              		.cfi_startproc
 2567              		@ Function supports interworking.
 2568              		@ args = 0, pretend = 0, frame = 24
 2569              		@ frame_needed = 1, uses_anonymous_args = 0
 2570 07e0 0DC0A0E1 		mov	ip, sp
 2571              	.LCFI22:
 2572              		.cfi_def_cfa_register 12
 2573 07e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2574 07e8 04B04CE2 		sub	fp, ip, #4
 2575              		.cfi_offset 14, -8
 2576              		.cfi_offset 13, -12
 2577              		.cfi_offset 11, -16
 2578              	.LCFI23:
 2579              		.cfi_def_cfa 11, 4
 2580 07ec 18D04DE2 		sub	sp, sp, #24
 2581 07f0 20300BE5 		str	r3, [fp, #-32]
 2582 07f4 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2583 07f8 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2584 07fc 0230A0E1 		mov	r3, r2
 2585 0800 19304BE5 		strb	r3, [fp, #-25]
 143:../src/lcd.c  **** 	uint16 aux_x = x, aux_y = y;
 2586              		.loc 1 143 0
 2587 0804 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2588 0808 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2589 080c B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2590 0810 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 144:../src/lcd.c  **** 
 145:../src/lcd.c  ****     while (*s){
 2591              		.loc 1 145 0
 2592 0814 0B0000EA 		b	.L49
 2593              	.L50:
 146:../src/lcd.c  ****     	lcd_putchar(aux_x, aux_y, color, *s++);
 2594              		.loc 1 146 0
 2595 0818 20301BE5 		ldr	r3, [fp, #-32]
 2596 081c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2597 0820 20201BE5 		ldr	r2, [fp, #-32]
 2598 0824 012082E2 		add	r2, r2, #1
 2599 0828 20200BE5 		str	r2, [fp, #-32]
 2600 082c BE005BE1 		ldrh	r0, [fp, #-14]
 2601 0830 B0115BE1 		ldrh	r1, [fp, #-16]
 2602 0834 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2603 0838 FEFFFFEB 		bl	lcd_putchar
 147:../src/lcd.c  ****     	aux_x += 8;
 2604              		.loc 1 147 0
 2605 083c BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2606 0840 083083E2 		add	r3, r3, #8
 2607 0844 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2608              	.L49:
 145:../src/lcd.c  ****     while (*s){
 2609              		.loc 1 145 0 discriminator 1
 2610 0848 20301BE5 		ldr	r3, [fp, #-32]
 2611 084c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2612 0850 000053E3 		cmp	r3, #0
 2613 0854 EFFFFF1A 		bne	.L50
 148:../src/lcd.c  ****     }
 149:../src/lcd.c  **** }
 2614              		.loc 1 149 0
 2615 0858 0CD04BE2 		sub	sp, fp, #12
 2616 085c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2617 0860 1EFF2FE1 		bx	lr
 2618              		.cfi_endproc
 2619              	.LFE11:
 2621              		.align	2
 2622              		.global	lcd_putint
 2624              	lcd_putint:
 2625              	.LFB12:
 150:../src/lcd.c  **** 
 151:../src/lcd.c  **** void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i )
 152:../src/lcd.c  **** {
 2626              		.loc 1 152 0
 2627              		.cfi_startproc
 2628              		@ Function supports interworking.
 2629              		@ args = 0, pretend = 0, frame = 32
 2630              		@ frame_needed = 1, uses_anonymous_args = 0
 2631 0864 0DC0A0E1 		mov	ip, sp
 2632              	.LCFI24:
 2633              		.cfi_def_cfa_register 12
 2634 0868 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2635 086c 04B04CE2 		sub	fp, ip, #4
 2636              		.cfi_offset 14, -8
 2637              		.cfi_offset 13, -12
 2638              		.cfi_offset 11, -16
 2639              	.LCFI25:
 2640              		.cfi_def_cfa 11, 4
 2641 0870 20D04DE2 		sub	sp, sp, #32
 2642 0874 28300BE5 		str	r3, [fp, #-40]
 2643 0878 BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 2644 087c B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 2645 0880 0230A0E1 		mov	r3, r2
 2646 0884 21304BE5 		strb	r3, [fp, #-33]
 153:../src/lcd.c  ****     char buf[8 + 1];
 154:../src/lcd.c  **** 	char *p = buf + 10;
 2647              		.loc 1 154 0
 2648 0888 1C304BE2 		sub	r3, fp, #28
 2649 088c 0A3083E2 		add	r3, r3, #10
 2650 0890 10300BE5 		str	r3, [fp, #-16]
 155:../src/lcd.c  **** 	int8 c;
 156:../src/lcd.c  **** 	boolean negativo = FALSE;
 2651              		.loc 1 156 0
 2652 0894 0030A0E3 		mov	r3, #0
 2653 0898 11304BE5 		strb	r3, [fp, #-17]
 157:../src/lcd.c  **** 
 158:../src/lcd.c  **** 	*p = '\0';
 2654              		.loc 1 158 0
 2655 089c 10301BE5 		ldr	r3, [fp, #-16]
 2656 08a0 0020A0E3 		mov	r2, #0
 2657 08a4 0020C3E5 		strb	r2, [r3, #0]
 159:../src/lcd.c  **** 	if(i < 0) {
 2658              		.loc 1 159 0
 2659 08a8 28301BE5 		ldr	r3, [fp, #-40]
 2660 08ac 000053E3 		cmp	r3, #0
 2661 08b0 040000AA 		bge	.L52
 160:../src/lcd.c  **** 		i *= -1;
 2662              		.loc 1 160 0
 2663 08b4 28301BE5 		ldr	r3, [fp, #-40]
 2664 08b8 003063E2 		rsb	r3, r3, #0
 2665 08bc 28300BE5 		str	r3, [fp, #-40]
 161:../src/lcd.c  **** 		negativo = TRUE;
 2666              		.loc 1 161 0
 2667 08c0 0130A0E3 		mov	r3, #1
 2668 08c4 11304BE5 		strb	r3, [fp, #-17]
 2669              	.L52:
 162:../src/lcd.c  **** 	}
 163:../src/lcd.c  **** 
 164:../src/lcd.c  **** 	do {
 165:../src/lcd.c  **** 		c = i % 10;
 2670              		.loc 1 165 0 discriminator 1
 2671 08c8 28101BE5 		ldr	r1, [fp, #-40]
 2672 08cc C0309FE5 		ldr	r3, .L54
 2673 08d0 9123C3E0 		smull	r2, r3, r1, r3
 2674 08d4 4321A0E1 		mov	r2, r3, asr #2
 2675 08d8 C13FA0E1 		mov	r3, r1, asr #31
 2676 08dc 022063E0 		rsb	r2, r3, r2
 2677 08e0 0230A0E1 		mov	r3, r2
 2678 08e4 0331A0E1 		mov	r3, r3, asl #2
 2679 08e8 023083E0 		add	r3, r3, r2
 2680 08ec 8330A0E1 		mov	r3, r3, asl #1
 2681 08f0 012063E0 		rsb	r2, r3, r1
 2682 08f4 0230A0E1 		mov	r3, r2
 2683 08f8 12304BE5 		strb	r3, [fp, #-18]
 166:../src/lcd.c  **** 		*--p = '0' + c;
 2684              		.loc 1 166 0 discriminator 1
 2685 08fc 10301BE5 		ldr	r3, [fp, #-16]
 2686 0900 013043E2 		sub	r3, r3, #1
 2687 0904 10300BE5 		str	r3, [fp, #-16]
 2688 0908 12305BE5 		ldrb	r3, [fp, #-18]	@ zero_extendqisi2
 2689 090c 303083E2 		add	r3, r3, #48
 2690 0910 FF2003E2 		and	r2, r3, #255
 2691 0914 10301BE5 		ldr	r3, [fp, #-16]
 2692 0918 0020C3E5 		strb	r2, [r3, #0]
 167:../src/lcd.c  **** 		i /= 10;
 2693              		.loc 1 167 0 discriminator 1
 2694 091c 28301BE5 		ldr	r3, [fp, #-40]
 2695 0920 6C209FE5 		ldr	r2, .L54
 2696 0924 9312C2E0 		smull	r1, r2, r3, r2
 2697 0928 4221A0E1 		mov	r2, r2, asr #2
 2698 092c C33FA0E1 		mov	r3, r3, asr #31
 2699 0930 023063E0 		rsb	r3, r3, r2
 2700 0934 28300BE5 		str	r3, [fp, #-40]
 168:../src/lcd.c  **** 	} while (i);
 2701              		.loc 1 168 0 discriminator 1
 2702 0938 28301BE5 		ldr	r3, [fp, #-40]
 2703 093c 000053E3 		cmp	r3, #0
 2704 0940 E0FFFF1A 		bne	.L52
 169:../src/lcd.c  **** 
 170:../src/lcd.c  **** 	if(negativo)
 2705              		.loc 1 170 0
 2706 0944 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2707 0948 000053E3 		cmp	r3, #0
 2708 094c 0500000A 		beq	.L53
 171:../src/lcd.c  **** 		*--p = '-';
 2709              		.loc 1 171 0
 2710 0950 10301BE5 		ldr	r3, [fp, #-16]
 2711 0954 013043E2 		sub	r3, r3, #1
 2712 0958 10300BE5 		str	r3, [fp, #-16]
 2713 095c 10301BE5 		ldr	r3, [fp, #-16]
 2714 0960 2D20A0E3 		mov	r2, #45
 2715 0964 0020C3E5 		strb	r2, [r3, #0]
 2716              	.L53:
 172:../src/lcd.c  **** 
 173:../src/lcd.c  **** 	lcd_puts(x, y, color, p);
 2717              		.loc 1 173 0
 2718 0968 BE115BE1 		ldrh	r1, [fp, #-30]
 2719 096c B0225BE1 		ldrh	r2, [fp, #-32]
 2720 0970 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2721 0974 0100A0E1 		mov	r0, r1
 2722 0978 0210A0E1 		mov	r1, r2
 2723 097c 0320A0E1 		mov	r2, r3
 2724 0980 10301BE5 		ldr	r3, [fp, #-16]
 2725 0984 FEFFFFEB 		bl	lcd_puts
 174:../src/lcd.c  **** }
 2726              		.loc 1 174 0
 2727 0988 0CD04BE2 		sub	sp, fp, #12
 2728 098c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2729 0990 1EFF2FE1 		bx	lr
 2730              	.L55:
 2731              		.align	2
 2732              	.L54:
 2733 0994 67666666 		.word	1717986919
 2734              		.cfi_endproc
 2735              	.LFE12:
 2737              		.align	2
 2738              		.global	lcd_puthex
 2740              	lcd_puthex:
 2741              	.LFB13:
 175:../src/lcd.c  **** 
 176:../src/lcd.c  **** void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i )
 177:../src/lcd.c  **** {
 2742              		.loc 1 177 0
 2743              		.cfi_startproc
 2744              		@ Function supports interworking.
 2745              		@ args = 0, pretend = 0, frame = 32
 2746              		@ frame_needed = 1, uses_anonymous_args = 0
 2747 0998 0DC0A0E1 		mov	ip, sp
 2748              	.LCFI26:
 2749              		.cfi_def_cfa_register 12
 2750 099c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2751 09a0 04B04CE2 		sub	fp, ip, #4
 2752              		.cfi_offset 14, -8
 2753              		.cfi_offset 13, -12
 2754              		.cfi_offset 11, -16
 2755              	.LCFI27:
 2756              		.cfi_def_cfa 11, 4
 2757 09a4 20D04DE2 		sub	sp, sp, #32
 2758 09a8 28300BE5 		str	r3, [fp, #-40]
 2759 09ac BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 2760 09b0 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 2761 09b4 0230A0E1 		mov	r3, r2
 2762 09b8 21304BE5 		strb	r3, [fp, #-33]
 178:../src/lcd.c  ****     char buf[8 + 1];
 179:../src/lcd.c  ****     char *p = buf + 8;
 2763              		.loc 1 179 0
 2764 09bc 1C304BE2 		sub	r3, fp, #28
 2765 09c0 083083E2 		add	r3, r3, #8
 2766 09c4 10300BE5 		str	r3, [fp, #-16]
 180:../src/lcd.c  ****     uint8 c;
 181:../src/lcd.c  **** 
 182:../src/lcd.c  ****     *p = '\0';
 2767              		.loc 1 182 0
 2768 09c8 10301BE5 		ldr	r3, [fp, #-16]
 2769 09cc 0020A0E3 		mov	r2, #0
 2770 09d0 0020C3E5 		strb	r2, [r3, #0]
 2771              	.L59:
 183:../src/lcd.c  **** 
 184:../src/lcd.c  ****     do {
 185:../src/lcd.c  ****         c = i & 0xf;
 2772              		.loc 1 185 0
 2773 09d4 28301BE5 		ldr	r3, [fp, #-40]
 2774 09d8 FF3003E2 		and	r3, r3, #255
 2775 09dc 0F3003E2 		and	r3, r3, #15
 2776 09e0 11304BE5 		strb	r3, [fp, #-17]
 186:../src/lcd.c  ****         if( c < 10 )
 2777              		.loc 1 186 0
 2778 09e4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2779 09e8 090053E3 		cmp	r3, #9
 2780 09ec 0800008A 		bhi	.L57
 187:../src/lcd.c  ****             *--p = '0' + c;
 2781              		.loc 1 187 0
 2782 09f0 10301BE5 		ldr	r3, [fp, #-16]
 2783 09f4 013043E2 		sub	r3, r3, #1
 2784 09f8 10300BE5 		str	r3, [fp, #-16]
 2785 09fc 11305BE5 		ldrb	r3, [fp, #-17]
 2786 0a00 303083E2 		add	r3, r3, #48
 2787 0a04 FF2003E2 		and	r2, r3, #255
 2788 0a08 10301BE5 		ldr	r3, [fp, #-16]
 2789 0a0c 0020C3E5 		strb	r2, [r3, #0]
 2790 0a10 070000EA 		b	.L58
 2791              	.L57:
 188:../src/lcd.c  ****         else
 189:../src/lcd.c  ****             *--p = 'a' + c - 10;
 2792              		.loc 1 189 0
 2793 0a14 10301BE5 		ldr	r3, [fp, #-16]
 2794 0a18 013043E2 		sub	r3, r3, #1
 2795 0a1c 10300BE5 		str	r3, [fp, #-16]
 2796 0a20 11305BE5 		ldrb	r3, [fp, #-17]
 2797 0a24 573083E2 		add	r3, r3, #87
 2798 0a28 FF2003E2 		and	r2, r3, #255
 2799 0a2c 10301BE5 		ldr	r3, [fp, #-16]
 2800 0a30 0020C3E5 		strb	r2, [r3, #0]
 2801              	.L58:
 190:../src/lcd.c  ****         i = i >> 4;
 2802              		.loc 1 190 0
 2803 0a34 28301BE5 		ldr	r3, [fp, #-40]
 2804 0a38 2332A0E1 		mov	r3, r3, lsr #4
 2805 0a3c 28300BE5 		str	r3, [fp, #-40]
 191:../src/lcd.c  ****     } while( i );
 2806              		.loc 1 191 0
 2807 0a40 28301BE5 		ldr	r3, [fp, #-40]
 2808 0a44 000053E3 		cmp	r3, #0
 2809 0a48 E1FFFF1A 		bne	.L59
 192:../src/lcd.c  **** 
 193:../src/lcd.c  ****     lcd_puts(x, y, color, p);
 2810              		.loc 1 193 0
 2811 0a4c BE115BE1 		ldrh	r1, [fp, #-30]
 2812 0a50 B0225BE1 		ldrh	r2, [fp, #-32]
 2813 0a54 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2814 0a58 0100A0E1 		mov	r0, r1
 2815 0a5c 0210A0E1 		mov	r1, r2
 2816 0a60 0320A0E1 		mov	r2, r3
 2817 0a64 10301BE5 		ldr	r3, [fp, #-16]
 2818 0a68 FEFFFFEB 		bl	lcd_puts
 194:../src/lcd.c  **** }
 2819              		.loc 1 194 0
 2820 0a6c 0CD04BE2 		sub	sp, fp, #12
 2821 0a70 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2822 0a74 1EFF2FE1 		bx	lr
 2823              		.cfi_endproc
 2824              	.LFE13:
 2826              		.align	2
 2827              		.global	lcd_putchar_x2
 2829              	lcd_putchar_x2:
 2830              	.LFB14:
 195:../src/lcd.c  **** 
 196:../src/lcd.c  **** void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
 197:../src/lcd.c  **** {
 2831              		.loc 1 197 0
 2832              		.cfi_startproc
 2833              		@ Function supports interworking.
 2834              		@ args = 0, pretend = 0, frame = 16
 2835              		@ frame_needed = 1, uses_anonymous_args = 0
 2836 0a78 0DC0A0E1 		mov	ip, sp
 2837              	.LCFI28:
 2838              		.cfi_def_cfa_register 12
 2839 0a7c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2840 0a80 04B04CE2 		sub	fp, ip, #4
 2841              		.cfi_offset 14, -8
 2842              		.cfi_offset 13, -12
 2843              		.cfi_offset 11, -16
 2844              	.LCFI29:
 2845              		.cfi_def_cfa 11, 4
 2846 0a84 10D04DE2 		sub	sp, sp, #16
 2847 0a88 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2848 0a8c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2849 0a90 19204BE5 		strb	r2, [fp, #-25]
 2850 0a94 1A304BE5 		strb	r3, [fp, #-26]
 198:../src/lcd.c  **** 	uint8 row, line;
 199:../src/lcd.c  **** 	uint8 *bitmap;
 200:../src/lcd.c  **** 
 201:../src/lcd.c  **** 	bitmap = font + ch*16;
 2851              		.loc 1 201 0
 2852 0a98 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2853 0a9c 0332A0E1 		mov	r3, r3, asl #4
 2854 0aa0 0320A0E1 		mov	r2, r3
 2855 0aa4 08349FE5 		ldr	r3, .L67
 2856 0aa8 033082E0 		add	r3, r2, r3
 2857 0aac 14300BE5 		str	r3, [fp, #-20]
 202:../src/lcd.c  **** 	for(line = 0; line < 16; line++){
 2858              		.loc 1 202 0
 2859 0ab0 0030A0E3 		mov	r3, #0
 2860 0ab4 0E304BE5 		strb	r3, [fp, #-14]
 2861 0ab8 F70000EA 		b	.L61
 2862              	.L66:
 203:../src/lcd.c  **** 		for(row = 0; row < 8; row++){
 2863              		.loc 1 203 0
 2864 0abc 0030A0E3 		mov	r3, #0
 2865 0ac0 0D304BE5 		strb	r3, [fp, #-13]
 2866 0ac4 EE0000EA 		b	.L62
 2867              	.L65:
 204:../src/lcd.c  **** 			if(bitmap[line] & (0x80>>row)) {
 2868              		.loc 1 204 0
 2869 0ac8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2870 0acc 14201BE5 		ldr	r2, [fp, #-20]
 2871 0ad0 033082E0 		add	r3, r2, r3
 2872 0ad4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2873 0ad8 0320A0E1 		mov	r2, r3
 2874 0adc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2875 0ae0 8010A0E3 		mov	r1, #128
 2876 0ae4 5133A0E1 		mov	r3, r1, asr r3
 2877 0ae8 033002E0 		and	r3, r2, r3
 2878 0aec 000053E3 		cmp	r3, #0
 2879 0af0 7200000A 		beq	.L63
 205:../src/lcd.c  **** 				lcd_putpixel(2*(x+row)-18, 2*(y+line) - y, color);
 2880              		.loc 1 205 0
 2881 0af4 B6215BE1 		ldrh	r2, [fp, #-22]
 2882 0af8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2883 0afc 033082E0 		add	r3, r2, r3
 2884 0b00 093043E2 		sub	r3, r3, #9
 2885 0b04 0338A0E1 		mov	r3, r3, asl #16
 2886 0b08 2338A0E1 		mov	r3, r3, lsr #16
 2887 0b0c 8330A0E1 		mov	r3, r3, asl #1
 2888 0b10 0338A0E1 		mov	r3, r3, asl #16
 2889 0b14 2318A0E1 		mov	r1, r3, lsr #16
 2890 0b18 B8215BE1 		ldrh	r2, [fp, #-24]
 2891 0b1c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2892 0b20 033082E0 		add	r3, r2, r3
 2893 0b24 0338A0E1 		mov	r3, r3, asl #16
 2894 0b28 2338A0E1 		mov	r3, r3, lsr #16
 2895 0b2c 8330A0E1 		mov	r3, r3, asl #1
 2896 0b30 0338A0E1 		mov	r3, r3, asl #16
 2897 0b34 2328A0E1 		mov	r2, r3, lsr #16
 2898 0b38 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2899 0b3c 023063E0 		rsb	r3, r3, r2
 2900 0b40 0338A0E1 		mov	r3, r3, asl #16
 2901 0b44 2328A0E1 		mov	r2, r3, lsr #16
 2902 0b48 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2903 0b4c 0100A0E1 		mov	r0, r1
 2904 0b50 0210A0E1 		mov	r1, r2
 2905 0b54 0320A0E1 		mov	r2, r3
 2906 0b58 FEFFFFEB 		bl	lcd_putpixel
 206:../src/lcd.c  **** 				lcd_putpixel(2*(x+row)-1-18, 2*(y+line) - y, color);
 2907              		.loc 1 206 0
 2908 0b5c B6215BE1 		ldrh	r2, [fp, #-22]
 2909 0b60 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2910 0b64 033082E0 		add	r3, r2, r3
 2911 0b68 0338A0E1 		mov	r3, r3, asl #16
 2912 0b6c 2338A0E1 		mov	r3, r3, lsr #16
 2913 0b70 8330A0E1 		mov	r3, r3, asl #1
 2914 0b74 0338A0E1 		mov	r3, r3, asl #16
 2915 0b78 2338A0E1 		mov	r3, r3, lsr #16
 2916 0b7c 133043E2 		sub	r3, r3, #19
 2917 0b80 0338A0E1 		mov	r3, r3, asl #16
 2918 0b84 2318A0E1 		mov	r1, r3, lsr #16
 2919 0b88 B8215BE1 		ldrh	r2, [fp, #-24]
 2920 0b8c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2921 0b90 033082E0 		add	r3, r2, r3
 2922 0b94 0338A0E1 		mov	r3, r3, asl #16
 2923 0b98 2338A0E1 		mov	r3, r3, lsr #16
 2924 0b9c 8330A0E1 		mov	r3, r3, asl #1
 2925 0ba0 0338A0E1 		mov	r3, r3, asl #16
 2926 0ba4 2328A0E1 		mov	r2, r3, lsr #16
 2927 0ba8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2928 0bac 023063E0 		rsb	r3, r3, r2
 2929 0bb0 0338A0E1 		mov	r3, r3, asl #16
 2930 0bb4 2328A0E1 		mov	r2, r3, lsr #16
 2931 0bb8 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2932 0bbc 0100A0E1 		mov	r0, r1
 2933 0bc0 0210A0E1 		mov	r1, r2
 2934 0bc4 0320A0E1 		mov	r2, r3
 2935 0bc8 FEFFFFEB 		bl	lcd_putpixel
 207:../src/lcd.c  **** 				lcd_putpixel(2*(x+row)-18, 2*(y+line)+1 - y, color);
 2936              		.loc 1 207 0
 2937 0bcc B6215BE1 		ldrh	r2, [fp, #-22]
 2938 0bd0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2939 0bd4 033082E0 		add	r3, r2, r3
 2940 0bd8 093043E2 		sub	r3, r3, #9
 2941 0bdc 0338A0E1 		mov	r3, r3, asl #16
 2942 0be0 2338A0E1 		mov	r3, r3, lsr #16
 2943 0be4 8330A0E1 		mov	r3, r3, asl #1
 2944 0be8 0338A0E1 		mov	r3, r3, asl #16
 2945 0bec 2318A0E1 		mov	r1, r3, lsr #16
 2946 0bf0 B8215BE1 		ldrh	r2, [fp, #-24]
 2947 0bf4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2948 0bf8 033082E0 		add	r3, r2, r3
 2949 0bfc 0338A0E1 		mov	r3, r3, asl #16
 2950 0c00 2338A0E1 		mov	r3, r3, lsr #16
 2951 0c04 8330A0E1 		mov	r3, r3, asl #1
 2952 0c08 0338A0E1 		mov	r3, r3, asl #16
 2953 0c0c 2328A0E1 		mov	r2, r3, lsr #16
 2954 0c10 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2955 0c14 023063E0 		rsb	r3, r3, r2
 2956 0c18 0338A0E1 		mov	r3, r3, asl #16
 2957 0c1c 2338A0E1 		mov	r3, r3, lsr #16
 2958 0c20 013083E2 		add	r3, r3, #1
 2959 0c24 0338A0E1 		mov	r3, r3, asl #16
 2960 0c28 2328A0E1 		mov	r2, r3, lsr #16
 2961 0c2c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2962 0c30 0100A0E1 		mov	r0, r1
 2963 0c34 0210A0E1 		mov	r1, r2
 2964 0c38 0320A0E1 		mov	r2, r3
 2965 0c3c FEFFFFEB 		bl	lcd_putpixel
 208:../src/lcd.c  **** 				lcd_putpixel(2*(x+row)-1-18, 2*(y+line)+1 - y, color);
 2966              		.loc 1 208 0
 2967 0c40 B6215BE1 		ldrh	r2, [fp, #-22]
 2968 0c44 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2969 0c48 033082E0 		add	r3, r2, r3
 2970 0c4c 0338A0E1 		mov	r3, r3, asl #16
 2971 0c50 2338A0E1 		mov	r3, r3, lsr #16
 2972 0c54 8330A0E1 		mov	r3, r3, asl #1
 2973 0c58 0338A0E1 		mov	r3, r3, asl #16
 2974 0c5c 2338A0E1 		mov	r3, r3, lsr #16
 2975 0c60 133043E2 		sub	r3, r3, #19
 2976 0c64 0338A0E1 		mov	r3, r3, asl #16
 2977 0c68 2318A0E1 		mov	r1, r3, lsr #16
 2978 0c6c B8215BE1 		ldrh	r2, [fp, #-24]
 2979 0c70 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2980 0c74 033082E0 		add	r3, r2, r3
 2981 0c78 0338A0E1 		mov	r3, r3, asl #16
 2982 0c7c 2338A0E1 		mov	r3, r3, lsr #16
 2983 0c80 8330A0E1 		mov	r3, r3, asl #1
 2984 0c84 0338A0E1 		mov	r3, r3, asl #16
 2985 0c88 2328A0E1 		mov	r2, r3, lsr #16
 2986 0c8c B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2987 0c90 023063E0 		rsb	r3, r3, r2
 2988 0c94 0338A0E1 		mov	r3, r3, asl #16
 2989 0c98 2338A0E1 		mov	r3, r3, lsr #16
 2990 0c9c 013083E2 		add	r3, r3, #1
 2991 0ca0 0338A0E1 		mov	r3, r3, asl #16
 2992 0ca4 2328A0E1 		mov	r2, r3, lsr #16
 2993 0ca8 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2994 0cac 0100A0E1 		mov	r0, r1
 2995 0cb0 0210A0E1 		mov	r1, r2
 2996 0cb4 0320A0E1 		mov	r2, r3
 2997 0cb8 FEFFFFEB 		bl	lcd_putpixel
 2998 0cbc 6D0000EA 		b	.L64
 2999              	.L63:
 209:../src/lcd.c  **** 
 210:../src/lcd.c  **** 			} else {
 211:../src/lcd.c  **** 				lcd_putpixel(2*(x+row)-18, 2*(y+line) - y, WHITE);
 3000              		.loc 1 211 0
 3001 0cc0 B6215BE1 		ldrh	r2, [fp, #-22]
 3002 0cc4 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3003 0cc8 033082E0 		add	r3, r2, r3
 3004 0ccc 093043E2 		sub	r3, r3, #9
 3005 0cd0 0338A0E1 		mov	r3, r3, asl #16
 3006 0cd4 2338A0E1 		mov	r3, r3, lsr #16
 3007 0cd8 8330A0E1 		mov	r3, r3, asl #1
 3008 0cdc 0338A0E1 		mov	r3, r3, asl #16
 3009 0ce0 2328A0E1 		mov	r2, r3, lsr #16
 3010 0ce4 B8115BE1 		ldrh	r1, [fp, #-24]
 3011 0ce8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3012 0cec 033081E0 		add	r3, r1, r3
 3013 0cf0 0338A0E1 		mov	r3, r3, asl #16
 3014 0cf4 2338A0E1 		mov	r3, r3, lsr #16
 3015 0cf8 8330A0E1 		mov	r3, r3, asl #1
 3016 0cfc 0338A0E1 		mov	r3, r3, asl #16
 3017 0d00 2318A0E1 		mov	r1, r3, lsr #16
 3018 0d04 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3019 0d08 013063E0 		rsb	r3, r3, r1
 3020 0d0c 0338A0E1 		mov	r3, r3, asl #16
 3021 0d10 2338A0E1 		mov	r3, r3, lsr #16
 3022 0d14 0200A0E1 		mov	r0, r2
 3023 0d18 0310A0E1 		mov	r1, r3
 3024 0d1c 0020A0E3 		mov	r2, #0
 3025 0d20 FEFFFFEB 		bl	lcd_putpixel
 212:../src/lcd.c  **** 				lcd_putpixel(2*(x+row)-1-18, 2*(y+line) - y, WHITE);
 3026              		.loc 1 212 0
 3027 0d24 B6215BE1 		ldrh	r2, [fp, #-22]
 3028 0d28 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3029 0d2c 033082E0 		add	r3, r2, r3
 3030 0d30 0338A0E1 		mov	r3, r3, asl #16
 3031 0d34 2338A0E1 		mov	r3, r3, lsr #16
 3032 0d38 8330A0E1 		mov	r3, r3, asl #1
 3033 0d3c 0338A0E1 		mov	r3, r3, asl #16
 3034 0d40 2338A0E1 		mov	r3, r3, lsr #16
 3035 0d44 133043E2 		sub	r3, r3, #19
 3036 0d48 0338A0E1 		mov	r3, r3, asl #16
 3037 0d4c 2328A0E1 		mov	r2, r3, lsr #16
 3038 0d50 B8115BE1 		ldrh	r1, [fp, #-24]
 3039 0d54 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3040 0d58 033081E0 		add	r3, r1, r3
 3041 0d5c 0338A0E1 		mov	r3, r3, asl #16
 3042 0d60 2338A0E1 		mov	r3, r3, lsr #16
 3043 0d64 8330A0E1 		mov	r3, r3, asl #1
 3044 0d68 0338A0E1 		mov	r3, r3, asl #16
 3045 0d6c 2318A0E1 		mov	r1, r3, lsr #16
 3046 0d70 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3047 0d74 013063E0 		rsb	r3, r3, r1
 3048 0d78 0338A0E1 		mov	r3, r3, asl #16
 3049 0d7c 2338A0E1 		mov	r3, r3, lsr #16
 3050 0d80 0200A0E1 		mov	r0, r2
 3051 0d84 0310A0E1 		mov	r1, r3
 3052 0d88 0020A0E3 		mov	r2, #0
 3053 0d8c FEFFFFEB 		bl	lcd_putpixel
 213:../src/lcd.c  **** 				lcd_putpixel(2*(x+row)-18, 2*(y+line)+1 - y, WHITE);
 3054              		.loc 1 213 0
 3055 0d90 B6215BE1 		ldrh	r2, [fp, #-22]
 3056 0d94 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3057 0d98 033082E0 		add	r3, r2, r3
 3058 0d9c 093043E2 		sub	r3, r3, #9
 3059 0da0 0338A0E1 		mov	r3, r3, asl #16
 3060 0da4 2338A0E1 		mov	r3, r3, lsr #16
 3061 0da8 8330A0E1 		mov	r3, r3, asl #1
 3062 0dac 0338A0E1 		mov	r3, r3, asl #16
 3063 0db0 2328A0E1 		mov	r2, r3, lsr #16
 3064 0db4 B8115BE1 		ldrh	r1, [fp, #-24]
 3065 0db8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3066 0dbc 033081E0 		add	r3, r1, r3
 3067 0dc0 0338A0E1 		mov	r3, r3, asl #16
 3068 0dc4 2338A0E1 		mov	r3, r3, lsr #16
 3069 0dc8 8330A0E1 		mov	r3, r3, asl #1
 3070 0dcc 0338A0E1 		mov	r3, r3, asl #16
 3071 0dd0 2318A0E1 		mov	r1, r3, lsr #16
 3072 0dd4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3073 0dd8 013063E0 		rsb	r3, r3, r1
 3074 0ddc 0338A0E1 		mov	r3, r3, asl #16
 3075 0de0 2338A0E1 		mov	r3, r3, lsr #16
 3076 0de4 013083E2 		add	r3, r3, #1
 3077 0de8 0338A0E1 		mov	r3, r3, asl #16
 3078 0dec 2338A0E1 		mov	r3, r3, lsr #16
 3079 0df0 0200A0E1 		mov	r0, r2
 3080 0df4 0310A0E1 		mov	r1, r3
 3081 0df8 0020A0E3 		mov	r2, #0
 3082 0dfc FEFFFFEB 		bl	lcd_putpixel
 214:../src/lcd.c  **** 				lcd_putpixel(2*(x+row)-1-18, 2*(y+line)+1 - y, WHITE);
 3083              		.loc 1 214 0
 3084 0e00 B6215BE1 		ldrh	r2, [fp, #-22]
 3085 0e04 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3086 0e08 033082E0 		add	r3, r2, r3
 3087 0e0c 0338A0E1 		mov	r3, r3, asl #16
 3088 0e10 2338A0E1 		mov	r3, r3, lsr #16
 3089 0e14 8330A0E1 		mov	r3, r3, asl #1
 3090 0e18 0338A0E1 		mov	r3, r3, asl #16
 3091 0e1c 2338A0E1 		mov	r3, r3, lsr #16
 3092 0e20 133043E2 		sub	r3, r3, #19
 3093 0e24 0338A0E1 		mov	r3, r3, asl #16
 3094 0e28 2328A0E1 		mov	r2, r3, lsr #16
 3095 0e2c B8115BE1 		ldrh	r1, [fp, #-24]
 3096 0e30 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3097 0e34 033081E0 		add	r3, r1, r3
 3098 0e38 0338A0E1 		mov	r3, r3, asl #16
 3099 0e3c 2338A0E1 		mov	r3, r3, lsr #16
 3100 0e40 8330A0E1 		mov	r3, r3, asl #1
 3101 0e44 0338A0E1 		mov	r3, r3, asl #16
 3102 0e48 2318A0E1 		mov	r1, r3, lsr #16
 3103 0e4c B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3104 0e50 013063E0 		rsb	r3, r3, r1
 3105 0e54 0338A0E1 		mov	r3, r3, asl #16
 3106 0e58 2338A0E1 		mov	r3, r3, lsr #16
 3107 0e5c 013083E2 		add	r3, r3, #1
 3108 0e60 0338A0E1 		mov	r3, r3, asl #16
 3109 0e64 2338A0E1 		mov	r3, r3, lsr #16
 3110 0e68 0200A0E1 		mov	r0, r2
 3111 0e6c 0310A0E1 		mov	r1, r3
 3112 0e70 0020A0E3 		mov	r2, #0
 3113 0e74 FEFFFFEB 		bl	lcd_putpixel
 3114              	.L64:
 203:../src/lcd.c  **** 		for(row = 0; row < 8; row++){
 3115              		.loc 1 203 0
 3116 0e78 0D305BE5 		ldrb	r3, [fp, #-13]
 3117 0e7c 013083E2 		add	r3, r3, #1
 3118 0e80 0D304BE5 		strb	r3, [fp, #-13]
 3119              	.L62:
 203:../src/lcd.c  **** 		for(row = 0; row < 8; row++){
 3120              		.loc 1 203 0 is_stmt 0 discriminator 1
 3121 0e84 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3122 0e88 070053E3 		cmp	r3, #7
 3123 0e8c 0DFFFF9A 		bls	.L65
 202:../src/lcd.c  **** 	for(line = 0; line < 16; line++){
 3124              		.loc 1 202 0 is_stmt 1
 3125 0e90 0E305BE5 		ldrb	r3, [fp, #-14]
 3126 0e94 013083E2 		add	r3, r3, #1
 3127 0e98 0E304BE5 		strb	r3, [fp, #-14]
 3128              	.L61:
 202:../src/lcd.c  **** 	for(line = 0; line < 16; line++){
 3129              		.loc 1 202 0 is_stmt 0 discriminator 1
 3130 0e9c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3131 0ea0 0F0053E3 		cmp	r3, #15
 3132 0ea4 04FFFF9A 		bls	.L66
 215:../src/lcd.c  **** 			}
 216:../src/lcd.c  **** 		}
 217:../src/lcd.c  **** 	}
 218:../src/lcd.c  **** }
 3133              		.loc 1 218 0 is_stmt 1
 3134 0ea8 0CD04BE2 		sub	sp, fp, #12
 3135 0eac 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3136 0eb0 1EFF2FE1 		bx	lr
 3137              	.L68:
 3138              		.align	2
 3139              	.L67:
 3140 0eb4 00000000 		.word	font
 3141              		.cfi_endproc
 3142              	.LFE14:
 3144              		.align	2
 3145              		.global	lcd_puts_x2
 3147              	lcd_puts_x2:
 3148              	.LFB15:
 219:../src/lcd.c  **** 
 220:../src/lcd.c  **** void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
 221:../src/lcd.c  **** {
 3149              		.loc 1 221 0
 3150              		.cfi_startproc
 3151              		@ Function supports interworking.
 3152              		@ args = 0, pretend = 0, frame = 16
 3153              		@ frame_needed = 1, uses_anonymous_args = 0
 3154 0eb8 0DC0A0E1 		mov	ip, sp
 3155              	.LCFI30:
 3156              		.cfi_def_cfa_register 12
 3157 0ebc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3158 0ec0 04B04CE2 		sub	fp, ip, #4
 3159              		.cfi_offset 14, -8
 3160              		.cfi_offset 13, -12
 3161              		.cfi_offset 11, -16
 3162              	.LCFI31:
 3163              		.cfi_def_cfa 11, 4
 3164 0ec4 10D04DE2 		sub	sp, sp, #16
 3165 0ec8 18300BE5 		str	r3, [fp, #-24]
 3166 0ecc BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 3167 0ed0 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 3168 0ed4 0230A0E1 		mov	r3, r2
 3169 0ed8 11304BE5 		strb	r3, [fp, #-17]
 222:../src/lcd.c  **** 	while(*s) {
 3170              		.loc 1 222 0
 3171 0edc 0B0000EA 		b	.L70
 3172              	.L71:
 223:../src/lcd.c  **** 		lcd_putchar_x2(x, y, color, *s);
 3173              		.loc 1 223 0
 3174 0ee0 18301BE5 		ldr	r3, [fp, #-24]
 3175 0ee4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3176 0ee8 BE005BE1 		ldrh	r0, [fp, #-14]
 3177 0eec B0115BE1 		ldrh	r1, [fp, #-16]
 3178 0ef0 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 3179 0ef4 FEFFFFEB 		bl	lcd_putchar_x2
 224:../src/lcd.c  **** 		s++;
 3180              		.loc 1 224 0
 3181 0ef8 18301BE5 		ldr	r3, [fp, #-24]
 3182 0efc 013083E2 		add	r3, r3, #1
 3183 0f00 18300BE5 		str	r3, [fp, #-24]
 225:../src/lcd.c  **** 		x = x + 8;
 3184              		.loc 1 225 0
 3185 0f04 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3186 0f08 083083E2 		add	r3, r3, #8
 3187 0f0c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3188              	.L70:
 222:../src/lcd.c  **** 	while(*s) {
 3189              		.loc 1 222 0 discriminator 1
 3190 0f10 18301BE5 		ldr	r3, [fp, #-24]
 3191 0f14 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3192 0f18 000053E3 		cmp	r3, #0
 3193 0f1c EFFFFF1A 		bne	.L71
 226:../src/lcd.c  **** 	}
 227:../src/lcd.c  **** }
 3194              		.loc 1 227 0
 3195 0f20 0CD04BE2 		sub	sp, fp, #12
 3196 0f24 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3197 0f28 1EFF2FE1 		bx	lr
 3198              		.cfi_endproc
 3199              	.LFE15:
 3201              		.align	2
 3202              		.global	lcd_putint_x2
 3204              	lcd_putint_x2:
 3205              	.LFB16:
 228:../src/lcd.c  **** 
 229:../src/lcd.c  **** void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
 230:../src/lcd.c  **** {
 3206              		.loc 1 230 0
 3207              		.cfi_startproc
 3208              		@ Function supports interworking.
 3209              		@ args = 0, pretend = 0, frame = 32
 3210              		@ frame_needed = 1, uses_anonymous_args = 0
 3211 0f2c 0DC0A0E1 		mov	ip, sp
 3212              	.LCFI32:
 3213              		.cfi_def_cfa_register 12
 3214 0f30 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3215 0f34 04B04CE2 		sub	fp, ip, #4
 3216              		.cfi_offset 14, -8
 3217              		.cfi_offset 13, -12
 3218              		.cfi_offset 11, -16
 3219              	.LCFI33:
 3220              		.cfi_def_cfa 11, 4
 3221 0f38 20D04DE2 		sub	sp, sp, #32
 3222 0f3c 28300BE5 		str	r3, [fp, #-40]
 3223 0f40 BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 3224 0f44 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 3225 0f48 0230A0E1 		mov	r3, r2
 3226 0f4c 21304BE5 		strb	r3, [fp, #-33]
 231:../src/lcd.c  **** 	char buf[8 + 1];
 232:../src/lcd.c  **** 	char *p = buf + 10;
 3227              		.loc 1 232 0
 3228 0f50 1C304BE2 		sub	r3, fp, #28
 3229 0f54 0A3083E2 		add	r3, r3, #10
 3230 0f58 10300BE5 		str	r3, [fp, #-16]
 233:../src/lcd.c  **** 	int8 c;
 234:../src/lcd.c  **** 	boolean negativo = FALSE;
 3231              		.loc 1 234 0
 3232 0f5c 0030A0E3 		mov	r3, #0
 3233 0f60 11304BE5 		strb	r3, [fp, #-17]
 235:../src/lcd.c  **** 
 236:../src/lcd.c  **** 	*p = '\0';
 3234              		.loc 1 236 0
 3235 0f64 10301BE5 		ldr	r3, [fp, #-16]
 3236 0f68 0020A0E3 		mov	r2, #0
 3237 0f6c 0020C3E5 		strb	r2, [r3, #0]
 237:../src/lcd.c  **** 	if(i < 0) {
 3238              		.loc 1 237 0
 3239 0f70 28301BE5 		ldr	r3, [fp, #-40]
 3240 0f74 000053E3 		cmp	r3, #0
 3241 0f78 040000AA 		bge	.L73
 238:../src/lcd.c  **** 		i *= -1;
 3242              		.loc 1 238 0
 3243 0f7c 28301BE5 		ldr	r3, [fp, #-40]
 3244 0f80 003063E2 		rsb	r3, r3, #0
 3245 0f84 28300BE5 		str	r3, [fp, #-40]
 239:../src/lcd.c  **** 		negativo = TRUE;
 3246              		.loc 1 239 0
 3247 0f88 0130A0E3 		mov	r3, #1
 3248 0f8c 11304BE5 		strb	r3, [fp, #-17]
 3249              	.L73:
 240:../src/lcd.c  **** 	}
 241:../src/lcd.c  **** 
 242:../src/lcd.c  **** 	do {
 243:../src/lcd.c  **** 		c = i % 10;
 3250              		.loc 1 243 0 discriminator 1
 3251 0f90 28101BE5 		ldr	r1, [fp, #-40]
 3252 0f94 C0309FE5 		ldr	r3, .L75
 3253 0f98 9123C3E0 		smull	r2, r3, r1, r3
 3254 0f9c 4321A0E1 		mov	r2, r3, asr #2
 3255 0fa0 C13FA0E1 		mov	r3, r1, asr #31
 3256 0fa4 022063E0 		rsb	r2, r3, r2
 3257 0fa8 0230A0E1 		mov	r3, r2
 3258 0fac 0331A0E1 		mov	r3, r3, asl #2
 3259 0fb0 023083E0 		add	r3, r3, r2
 3260 0fb4 8330A0E1 		mov	r3, r3, asl #1
 3261 0fb8 012063E0 		rsb	r2, r3, r1
 3262 0fbc 0230A0E1 		mov	r3, r2
 3263 0fc0 12304BE5 		strb	r3, [fp, #-18]
 244:../src/lcd.c  **** 		*--p = '0' + c;
 3264              		.loc 1 244 0 discriminator 1
 3265 0fc4 10301BE5 		ldr	r3, [fp, #-16]
 3266 0fc8 013043E2 		sub	r3, r3, #1
 3267 0fcc 10300BE5 		str	r3, [fp, #-16]
 3268 0fd0 12305BE5 		ldrb	r3, [fp, #-18]	@ zero_extendqisi2
 3269 0fd4 303083E2 		add	r3, r3, #48
 3270 0fd8 FF2003E2 		and	r2, r3, #255
 3271 0fdc 10301BE5 		ldr	r3, [fp, #-16]
 3272 0fe0 0020C3E5 		strb	r2, [r3, #0]
 245:../src/lcd.c  **** 		i /= 10;
 3273              		.loc 1 245 0 discriminator 1
 3274 0fe4 28301BE5 		ldr	r3, [fp, #-40]
 3275 0fe8 6C209FE5 		ldr	r2, .L75
 3276 0fec 9312C2E0 		smull	r1, r2, r3, r2
 3277 0ff0 4221A0E1 		mov	r2, r2, asr #2
 3278 0ff4 C33FA0E1 		mov	r3, r3, asr #31
 3279 0ff8 023063E0 		rsb	r3, r3, r2
 3280 0ffc 28300BE5 		str	r3, [fp, #-40]
 246:../src/lcd.c  **** 	} while (i);
 3281              		.loc 1 246 0 discriminator 1
 3282 1000 28301BE5 		ldr	r3, [fp, #-40]
 3283 1004 000053E3 		cmp	r3, #0
 3284 1008 E0FFFF1A 		bne	.L73
 247:../src/lcd.c  **** 
 248:../src/lcd.c  **** 	if(negativo)
 3285              		.loc 1 248 0
 3286 100c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3287 1010 000053E3 		cmp	r3, #0
 3288 1014 0500000A 		beq	.L74
 249:../src/lcd.c  **** 		*--p = '-';
 3289              		.loc 1 249 0
 3290 1018 10301BE5 		ldr	r3, [fp, #-16]
 3291 101c 013043E2 		sub	r3, r3, #1
 3292 1020 10300BE5 		str	r3, [fp, #-16]
 3293 1024 10301BE5 		ldr	r3, [fp, #-16]
 3294 1028 2D20A0E3 		mov	r2, #45
 3295 102c 0020C3E5 		strb	r2, [r3, #0]
 3296              	.L74:
 250:../src/lcd.c  **** 
 251:../src/lcd.c  **** 	lcd_puts_x2(x, y, color, p);
 3297              		.loc 1 251 0
 3298 1030 BE115BE1 		ldrh	r1, [fp, #-30]
 3299 1034 B0225BE1 		ldrh	r2, [fp, #-32]
 3300 1038 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3301 103c 0100A0E1 		mov	r0, r1
 3302 1040 0210A0E1 		mov	r1, r2
 3303 1044 0320A0E1 		mov	r2, r3
 3304 1048 10301BE5 		ldr	r3, [fp, #-16]
 3305 104c FEFFFFEB 		bl	lcd_puts_x2
 252:../src/lcd.c  **** }
 3306              		.loc 1 252 0
 3307 1050 0CD04BE2 		sub	sp, fp, #12
 3308 1054 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3309 1058 1EFF2FE1 		bx	lr
 3310              	.L76:
 3311              		.align	2
 3312              	.L75:
 3313 105c 67666666 		.word	1717986919
 3314              		.cfi_endproc
 3315              	.LFE16:
 3317              		.align	2
 3318              		.global	lcd_puthex_x2
 3320              	lcd_puthex_x2:
 3321              	.LFB17:
 253:../src/lcd.c  **** 
 254:../src/lcd.c  **** void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i )
 255:../src/lcd.c  **** {
 3322              		.loc 1 255 0
 3323              		.cfi_startproc
 3324              		@ Function supports interworking.
 3325              		@ args = 0, pretend = 0, frame = 32
 3326              		@ frame_needed = 1, uses_anonymous_args = 0
 3327 1060 0DC0A0E1 		mov	ip, sp
 3328              	.LCFI34:
 3329              		.cfi_def_cfa_register 12
 3330 1064 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3331 1068 04B04CE2 		sub	fp, ip, #4
 3332              		.cfi_offset 14, -8
 3333              		.cfi_offset 13, -12
 3334              		.cfi_offset 11, -16
 3335              	.LCFI35:
 3336              		.cfi_def_cfa 11, 4
 3337 106c 20D04DE2 		sub	sp, sp, #32
 3338 1070 28300BE5 		str	r3, [fp, #-40]
 3339 1074 BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 3340 1078 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 3341 107c 0230A0E1 		mov	r3, r2
 3342 1080 21304BE5 		strb	r3, [fp, #-33]
 256:../src/lcd.c  **** 	char buf[8 + 1];
 257:../src/lcd.c  **** 	char *p = buf + 8;
 3343              		.loc 1 257 0
 3344 1084 1C304BE2 		sub	r3, fp, #28
 3345 1088 083083E2 		add	r3, r3, #8
 3346 108c 10300BE5 		str	r3, [fp, #-16]
 258:../src/lcd.c  **** 	uint8 c;
 259:../src/lcd.c  **** 
 260:../src/lcd.c  **** 	*p = '\0';
 3347              		.loc 1 260 0
 3348 1090 10301BE5 		ldr	r3, [fp, #-16]
 3349 1094 0020A0E3 		mov	r2, #0
 3350 1098 0020C3E5 		strb	r2, [r3, #0]
 3351              	.L80:
 261:../src/lcd.c  **** 
 262:../src/lcd.c  **** 	do {
 263:../src/lcd.c  **** 		c = i & 0xf;
 3352              		.loc 1 263 0
 3353 109c 28301BE5 		ldr	r3, [fp, #-40]
 3354 10a0 FF3003E2 		and	r3, r3, #255
 3355 10a4 0F3003E2 		and	r3, r3, #15
 3356 10a8 11304BE5 		strb	r3, [fp, #-17]
 264:../src/lcd.c  **** 		if( c < 10 )
 3357              		.loc 1 264 0
 3358 10ac 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3359 10b0 090053E3 		cmp	r3, #9
 3360 10b4 0800008A 		bhi	.L78
 265:../src/lcd.c  **** 			*--p = '0' + c;
 3361              		.loc 1 265 0
 3362 10b8 10301BE5 		ldr	r3, [fp, #-16]
 3363 10bc 013043E2 		sub	r3, r3, #1
 3364 10c0 10300BE5 		str	r3, [fp, #-16]
 3365 10c4 11305BE5 		ldrb	r3, [fp, #-17]
 3366 10c8 303083E2 		add	r3, r3, #48
 3367 10cc FF2003E2 		and	r2, r3, #255
 3368 10d0 10301BE5 		ldr	r3, [fp, #-16]
 3369 10d4 0020C3E5 		strb	r2, [r3, #0]
 3370 10d8 070000EA 		b	.L79
 3371              	.L78:
 266:../src/lcd.c  **** 		else
 267:../src/lcd.c  **** 			*--p = 'a' + c - 10;
 3372              		.loc 1 267 0
 3373 10dc 10301BE5 		ldr	r3, [fp, #-16]
 3374 10e0 013043E2 		sub	r3, r3, #1
 3375 10e4 10300BE5 		str	r3, [fp, #-16]
 3376 10e8 11305BE5 		ldrb	r3, [fp, #-17]
 3377 10ec 573083E2 		add	r3, r3, #87
 3378 10f0 FF2003E2 		and	r2, r3, #255
 3379 10f4 10301BE5 		ldr	r3, [fp, #-16]
 3380 10f8 0020C3E5 		strb	r2, [r3, #0]
 3381              	.L79:
 268:../src/lcd.c  **** 		i = i >> 4;
 3382              		.loc 1 268 0
 3383 10fc 28301BE5 		ldr	r3, [fp, #-40]
 3384 1100 2332A0E1 		mov	r3, r3, lsr #4
 3385 1104 28300BE5 		str	r3, [fp, #-40]
 269:../src/lcd.c  **** 	} while( i );
 3386              		.loc 1 269 0
 3387 1108 28301BE5 		ldr	r3, [fp, #-40]
 3388 110c 000053E3 		cmp	r3, #0
 3389 1110 E1FFFF1A 		bne	.L80
 270:../src/lcd.c  **** 
 271:../src/lcd.c  **** 	lcd_puts_x2(x, y, color, p);
 3390              		.loc 1 271 0
 3391 1114 BE115BE1 		ldrh	r1, [fp, #-30]
 3392 1118 B0225BE1 		ldrh	r2, [fp, #-32]
 3393 111c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3394 1120 0100A0E1 		mov	r0, r1
 3395 1124 0210A0E1 		mov	r1, r2
 3396 1128 0320A0E1 		mov	r2, r3
 3397 112c 10301BE5 		ldr	r3, [fp, #-16]
 3398 1130 FEFFFFEB 		bl	lcd_puts_x2
 272:../src/lcd.c  **** }
 3399              		.loc 1 272 0
 3400 1134 0CD04BE2 		sub	sp, fp, #12
 3401 1138 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3402 113c 1EFF2FE1 		bx	lr
 3403              		.cfi_endproc
 3404              	.LFE17:
 3406              		.align	2
 3407              		.global	lcd_putWallpaper
 3409              	lcd_putWallpaper:
 3410              	.LFB18:
 273:../src/lcd.c  **** 
 274:../src/lcd.c  **** void lcd_putWallpaper( uint8 *bmp )
 275:../src/lcd.c  **** {
 3411              		.loc 1 275 0
 3412              		.cfi_startproc
 3413              		@ Function supports interworking.
 3414              		@ args = 0, pretend = 0, frame = 24
 3415              		@ frame_needed = 1, uses_anonymous_args = 0
 3416 1140 0DC0A0E1 		mov	ip, sp
 3417              	.LCFI36:
 3418              		.cfi_def_cfa_register 12
 3419 1144 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3420 1148 04B04CE2 		sub	fp, ip, #4
 3421              		.cfi_offset 14, -8
 3422              		.cfi_offset 13, -12
 3423              		.cfi_offset 11, -16
 3424              	.LCFI37:
 3425              		.cfi_def_cfa 11, 4
 3426 114c 18D04DE2 		sub	sp, sp, #24
 3427 1150 20000BE5 		str	r0, [fp, #-32]
 276:../src/lcd.c  ****     uint32 headerSize;
 277:../src/lcd.c  **** 
 278:../src/lcd.c  ****     uint16 x, ySrc, yDst;
 279:../src/lcd.c  ****     uint16 offsetSrc, offsetDst;
 280:../src/lcd.c  **** 
 281:../src/lcd.c  ****     headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 3428              		.loc 1 281 0
 3429 1154 20301BE5 		ldr	r3, [fp, #-32]
 3430 1158 0A3083E2 		add	r3, r3, #10
 3431 115c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3432 1160 0320A0E1 		mov	r2, r3
 3433 1164 20301BE5 		ldr	r3, [fp, #-32]
 3434 1168 0B3083E2 		add	r3, r3, #11
 3435 116c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3436 1170 0334A0E1 		mov	r3, r3, asl #8
 3437 1174 032082E0 		add	r2, r2, r3
 3438 1178 20301BE5 		ldr	r3, [fp, #-32]
 3439 117c 0C3083E2 		add	r3, r3, #12
 3440 1180 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3441 1184 0338A0E1 		mov	r3, r3, asl #16
 3442 1188 032082E0 		add	r2, r2, r3
 3443 118c 20301BE5 		ldr	r3, [fp, #-32]
 3444 1190 0D3083E2 		add	r3, r3, #13
 3445 1194 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3446 1198 033CA0E1 		mov	r3, r3, asl #24
 3447 119c 033082E0 		add	r3, r2, r3
 3448 11a0 18300BE5 		str	r3, [fp, #-24]
 282:../src/lcd.c  **** 
 283:../src/lcd.c  ****     bmp = bmp + headerSize;
 3449              		.loc 1 283 0
 3450 11a4 20201BE5 		ldr	r2, [fp, #-32]
 3451 11a8 18301BE5 		ldr	r3, [fp, #-24]
 3452 11ac 033082E0 		add	r3, r2, r3
 3453 11b0 20300BE5 		str	r3, [fp, #-32]
 284:../src/lcd.c  ****     
 285:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3454              		.loc 1 285 0
 3455 11b4 0030A0E3 		mov	r3, #0
 3456 11b8 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3457 11bc EF30A0E3 		mov	r3, #239
 3458 11c0 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3459 11c4 2D0000EA 		b	.L82
 3460              	.L85:
 286:../src/lcd.c  ****     {
 287:../src/lcd.c  ****         offsetDst = yDst*LCD_WIDTH/2;
 3461              		.loc 1 287 0
 3462 11c8 B2215BE1 		ldrh	r2, [fp, #-18]
 3463 11cc 0230A0E1 		mov	r3, r2
 3464 11d0 0331A0E1 		mov	r3, r3, asl #2
 3465 11d4 023083E0 		add	r3, r3, r2
 3466 11d8 0333A0E1 		mov	r3, r3, asl #6
 3467 11dc A32FA0E1 		mov	r2, r3, lsr #31
 3468 11e0 033082E0 		add	r3, r2, r3
 3469 11e4 C330A0E1 		mov	r3, r3, asr #1
 3470 11e8 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 288:../src/lcd.c  ****         offsetSrc = ySrc*LCD_WIDTH/2;
 3471              		.loc 1 288 0
 3472 11ec B0215BE1 		ldrh	r2, [fp, #-16]
 3473 11f0 0230A0E1 		mov	r3, r2
 3474 11f4 0331A0E1 		mov	r3, r3, asl #2
 3475 11f8 023083E0 		add	r3, r3, r2
 3476 11fc 0333A0E1 		mov	r3, r3, asl #6
 3477 1200 A32FA0E1 		mov	r2, r3, lsr #31
 3478 1204 033082E0 		add	r3, r2, r3
 3479 1208 C330A0E1 		mov	r3, r3, asr #1
 3480 120c BC314BE1 		strh	r3, [fp, #-28]	@ movhi
 289:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3481              		.loc 1 289 0
 3482 1210 0030A0E3 		mov	r3, #0
 3483 1214 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3484 1218 0F0000EA 		b	.L83
 3485              	.L84:
 290:../src/lcd.c  ****             lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 3486              		.loc 1 290 0 discriminator 2
 3487 121c BA215BE1 		ldrh	r2, [fp, #-26]
 3488 1220 BE305BE1 		ldrh	r3, [fp, #-14]
 3489 1224 033082E0 		add	r3, r2, r3
 3490 1228 BC115BE1 		ldrh	r1, [fp, #-28]
 3491 122c BE205BE1 		ldrh	r2, [fp, #-14]
 3492 1230 022081E0 		add	r2, r1, r2
 3493 1234 20101BE5 		ldr	r1, [fp, #-32]
 3494 1238 022081E0 		add	r2, r1, r2
 3495 123c 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3496 1240 0220E0E1 		mvn	r2, r2
 3497 1244 FF1002E2 		and	r1, r2, #255
 3498 1248 48209FE5 		ldr	r2, .L86
 3499 124c 0310C2E7 		strb	r1, [r2, r3]
 289:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3500              		.loc 1 289 0 discriminator 2
 3501 1250 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3502 1254 013083E2 		add	r3, r3, #1
 3503 1258 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3504              	.L83:
 289:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3505              		.loc 1 289 0 is_stmt 0 discriminator 1
 3506 125c BE305BE1 		ldrh	r3, [fp, #-14]
 3507 1260 9F0053E3 		cmp	r3, #159
 3508 1264 ECFFFF9A 		bls	.L84
 285:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3509              		.loc 1 285 0 is_stmt 1
 3510 1268 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 3511 126c 013083E2 		add	r3, r3, #1
 3512 1270 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3513 1274 B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 3514 1278 013043E2 		sub	r3, r3, #1
 3515 127c B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3516              	.L82:
 285:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3517              		.loc 1 285 0 is_stmt 0 discriminator 1
 3518 1280 B0315BE1 		ldrh	r3, [fp, #-16]
 3519 1284 EF0053E3 		cmp	r3, #239
 3520 1288 CEFFFF9A 		bls	.L85
 291:../src/lcd.c  ****     }
 292:../src/lcd.c  **** }
 3521              		.loc 1 292 0 is_stmt 1
 3522 128c 0CD04BE2 		sub	sp, fp, #12
 3523 1290 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3524 1294 1EFF2FE1 		bx	lr
 3525              	.L87:
 3526              		.align	2
 3527              	.L86:
 3528 1298 00000000 		.word	lcd_buffer
 3529              		.cfi_endproc
 3530              	.LFE18:
 3532              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1703   .bss:00000000 $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1704   .bss:00000000 lcd_buffer
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1706   .bss:00009600 state
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1709   .text:00000000 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1712   .text:00000000 lcd_init
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1893   .text:000001c0 lcd_off
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1817   .text:00000110 $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1849   .text:00000184 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1852   .text:00000184 lcd_on
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1886   .text:000001bc $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1890   .text:000001c0 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1927   .text:000001f8 $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1931   .text:000001fc $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1934   .text:000001fc lcd_status
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1962   .text:00000220 $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1966   .text:00000224 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:1969   .text:00000224 lcd_clear
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2037   .text:000002a8 lcd_putpixel
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2030   .text:000002a4 $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2034   .text:000002a8 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2124   .text:00000390 $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2128   .text:00000394 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2131   .text:00000394 lcd_getpixel
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2195   .text:0000043c $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2199   .text:00000440 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2202   .text:00000440 lcd_draw_hline
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2288   .text:00000518 lcd_draw_vline
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2374   .text:000005f0 lcd_draw_box
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2438   .text:0000068c lcd_putchar
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2556   .text:000007dc $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2560   .text:000007e0 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2563   .text:000007e0 lcd_puts
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2624   .text:00000864 lcd_putint
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2733   .text:00000994 $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2737   .text:00000998 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2740   .text:00000998 lcd_puthex
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:2829   .text:00000a78 lcd_putchar_x2
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:3140   .text:00000eb4 $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:3144   .text:00000eb8 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:3147   .text:00000eb8 lcd_puts_x2
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:3204   .text:00000f2c lcd_putint_x2
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:3313   .text:0000105c $d
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:3317   .text:00001060 $a
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:3320   .text:00001060 lcd_puthex_x2
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:3409   .text:00001140 lcd_putWallpaper
C:\Users\USUARI~2\AppData\Local\Temp\cc5KJ3Yz.s:3528   .text:00001298 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
font
